{
  "metadata": {
    "buildId": "[..]",
    "result": "ANALYSIS_RESULT_SUCCESS",
    "filesAnalyzed": 53,
    "startTime": "[..]",
    "finishTime": "[..]"
  },
  "messages": [],
  "invocations": [],
  "issues": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "identical-code",
      "message": "Found 20 lines of identical code in 2 locations (mass = 67)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    ",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo > 0 {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 35,
      "value": 20,
      "valueDelta": 5,
      "location": {
        "path": "FileComplexity.swift",
        "range": {
          "startLine": 4,
          "endLine": 23,
          "startByte": 56,
          "endByte": 720
        }
      },
      "otherLocations": [
        {
          "path": "file_complexity.swift",
          "range": {
            "startLine": 4,
            "endLine": 23
          }
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "identical-code",
      "message": "Found 42 lines of identical code in 2 locations (mass = 152)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "snippetWithContext": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 145,
      "value": 42,
      "valueDelta": 27,
      "location": {
        "path": "NestedControl.swift",
        "range": {
          "startLine": 1,
          "endLine": 42,
          "startByte": 0,
          "endByte": 821
        }
      },
      "otherLocations": [
        {
          "path": "nested_control.swift",
          "range": {
            "startLine": 1,
            "endLine": 42
          }
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "identical-code",
      "message": "Found 20 lines of identical code in 2 locations (mass = 67)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    ",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 35,
      "value": 20,
      "valueDelta": 5,
      "location": {
        "path": "file_complexity.swift",
        "range": {
          "startLine": 4,
          "endLine": 23,
          "startByte": 52,
          "endByte": 716
        }
      },
      "otherLocations": [
        {
          "path": "FileComplexity.swift",
          "range": {
            "startLine": 4,
            "endLine": 23
          }
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "identical-code",
      "message": "Found 42 lines of identical code in 2 locations (mass = 152)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "snippetWithContext": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 145,
      "value": 42,
      "valueDelta": 27,
      "location": {
        "path": "nested_control.swift",
        "range": {
          "startLine": 1,
          "endLine": 42,
          "startByte": 0,
          "endByte": 821
        }
      },
      "otherLocations": [
        {
          "path": "NestedControl.swift",
          "range": {
            "startLine": 1,
            "endLine": 42
          }
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 17 lines of similar code in 2 locations (mass = 69)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "func identicalFunction1() {/n    let x = 1/n    let y = 2/n    let z = 3/n    /n    if x > y {/n        print(/"x is greater than y/")/n    } else if x < y {/n        print(/"x is less than y/")/n    } else {/n        print(/"x equals y/")/n    }/n    /n    for i in 0..<10 {/n        print(/"Counter: //(i)/")/n    }/n}",
      "snippetWithContext": "// This file is identical to another file to test duplication detection/n/nfunc identicalFunction1() {/n    let x = 1/n    let y = 2/n    let z = 3/n    /n    if x > y {/n        print(/"x is greater than y/")/n    } else if x < y {/n        print(/"x is less than y/")/n    } else {/n        print(/"x equals y/")/n    }/n    /n    for i in 0..<10 {/n        print(/"Counter: //(i)/")/n    }/n}/n/nfunc identicalFunction2() {/n    let x = 1/n    let y = 2/n    let z = 3/n    /n    if x > y {/n        print(/"x is greater than y/")/n    } else if x < y {/n        print(/"x is less than y/")/n    } else {",
      "effortMinutes": 20,
      "value": 17,
      "valueDelta": 2,
      "location": {
        "path": "Identical.swift",
        "range": {
          "startLine": 3,
          "endLine": 19,
          "startByte": 73,
          "endByte": 368
        }
      },
      "otherLocations": [
        {
          "path": "Identical.swift",
          "range": {
            "startLine": 21,
            "endLine": 37
          }
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 17 lines of similar code in 2 locations (mass = 69)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "func identicalFunction2() {/n    let x = 1/n    let y = 2/n    let z = 3/n    /n    if x > y {/n        print(/"x is greater than y/")/n    } else if x < y {/n        print(/"x is less than y/")/n    } else {/n        print(/"x equals y/")/n    }/n    /n    for i in 0..<10 {/n        print(/"Counter: //(i)/")/n    }/n}",
      "snippetWithContext": "    } else {/n        print(/"x equals y/")/n    }/n    /n    for i in 0..<10 {/n        print(/"Counter: //(i)/")/n    }/n}/n/nfunc identicalFunction2() {/n    let x = 1/n    let y = 2/n    let z = 3/n    /n    if x > y {/n        print(/"x is greater than y/")/n    } else if x < y {/n        print(/"x is less than y/")/n    } else {/n        print(/"x equals y/")/n    }/n    /n    for i in 0..<10 {/n        print(/"Counter: //(i)/")/n    }/n}",
      "effortMinutes": 20,
      "value": 17,
      "valueDelta": 2,
      "location": {
        "path": "Identical.swift",
        "range": {
          "startLine": 21,
          "endLine": 37,
          "startByte": 370,
          "endByte": 665
        }
      },
      "otherLocations": [
        {
          "path": "Identical.swift",
          "range": {
            "startLine": 3,
            "endLine": 19
          }
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 55)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func main() {/n    let foo = 42/n    if foo > 0 {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo > 0 {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 150,
      "value": 55,
      "valueDelta": 5,
      "location": {
        "path": "FileComplexity.swift",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 24,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 723
        }
      },
      "partialFingerprints": {
        "file.path": "FileComplexity.swift"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 65)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "snippetWithContext": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 350,
      "value": 65,
      "valueDelta": 15,
      "location": {
        "path": "NestedControl.swift",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 42,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 821
        }
      },
      "partialFingerprints": {
        "file.path": "NestedControl.swift"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 55)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func main() {/n    let foo = 42/n    if foo {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 150,
      "value": 55,
      "valueDelta": 5,
      "location": {
        "path": "file_complexity.swift",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 24,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 719
        }
      },
      "partialFingerprints": {
        "file.path": "file_complexity.swift"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 65)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "snippetWithContext": "func f1() {/n    let bar = true/n    let baz = true/n    let qux = true/n    let quux = true/n    /n    if bar {/n        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 350,
      "value": 65,
      "valueDelta": 15,
      "location": {
        "path": "nested_control.swift",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 42,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 821
        }
      },
      "partialFingerprints": {
        "file.path": "nested_control.swift"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func main() {/n    let foo = 42/n    if foo > 0 {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo > 0 {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "FileComplexity.swift",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 24,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 723
        }
      },
      "partialFingerprints": {
        "function.name": "main"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "snippetWithContext": "        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "NestedControl.swift",
        "range": {
          "startLine": 18,
          "startColumn": 1,
          "endLine": 42,
          "endColumn": 2,
          "startByte": 266,
          "endByte": 821
        }
      },
      "partialFingerprints": {
        "function.name": "f2"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 19): multipleConditions",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func multipleConditions(a: Int, b: Int, c: Int) -> String {/n    if a > b {/n        if b > c {/n            return /"a > b > c/"/n        } else {/n            return /"a > b, b <= c/"/n        }/n    } else if a == b {/n        if b > c {/n            return /"a = b > c/"/n        } else if b == c {/n            return /"a = b = c/"/n        } else {/n            return /"a = b < c/"/n        }/n    } else {/n        if a > c {/n            return /"b > a > c/"/n        } else if a == c {/n            return /"b > a = c/"/n        } else {/n            return /"b > a, a < c/"/n        }/n    }/n}",
      "snippetWithContext": "// Testing multiple conditionals for cognitive complexity/n/nfunc multipleConditions(a: Int, b: Int, c: Int) -> String {/n    if a > b {/n        if b > c {/n            return /"a > b > c/"/n        } else {/n            return /"a > b, b <= c/"/n        }/n    } else if a == b {/n        if b > c {/n            return /"a = b > c/"/n        } else if b == c {/n            return /"a = b = c/"/n        } else {/n            return /"a = b < c/"/n        }/n    } else {/n        if a > c {/n            return /"b > a > c/"/n        } else if a == c {/n            return /"b > a = c/"/n        } else {/n            return /"b > a, a < c/"/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 19,
      "valueDelta": 1,
      "location": {
        "path": "cognitive/MultipleConditionals.swift",
        "range": {
          "startLine": 3,
          "startColumn": 1,
          "endLine": 27,
          "endColumn": 2,
          "startByte": 59,
          "endByte": 624
        }
      },
      "partialFingerprints": {
        "function.name": "multipleConditions"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func main() {/n    let foo = 42/n    if foo {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "file_complexity.swift",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 24,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 719
        }
      },
      "partialFingerprints": {
        "function.name": "main"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "snippetWithContext": "        if baz {/n            if qux {/n                if quux {/n                    print(/"Deeply nested!/")/n                }/n            }/n        }/n    }/n}/n/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "nested_control.swift",
        "range": {
          "startLine": 18,
          "startColumn": 1,
          "endLine": 42,
          "endColumn": 2,
          "startByte": 266,
          "endByte": 821
        }
      },
      "partialFingerprints": {
        "function.name": "f2"
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo > 0 {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "FileComplexity.swift",
        "range": {
          "startLine": 7,
          "startColumn": 21,
          "endLine": 19,
          "endColumn": 22,
          "startByte": 150,
          "endByte": 673
        }
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if bar % 3 == 0 {/n                        print(/"Nested!/")/n                    }",
      "snippetWithContext": "func simple() {/n    print(/"This is a simple function/")/n}/n/nfunc complex() {/n    let bar = 42/n    if bar > 0 {/n        if bar > 10 {/n            if bar < 20 {/n                if bar % 2 == 0 {/n                    if bar % 3 == 0 {/n                        print(/"Nested!/")/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "FunctionComplexity.swift",
        "range": {
          "startLine": 11,
          "startColumn": 21,
          "endLine": 13,
          "endColumn": 22,
          "startByte": 211,
          "endByte": 291
        }
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }",
      "snippetWithContext": "/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "NestedControl.swift",
        "range": {
          "startLine": 27,
          "startColumn": 12,
          "endLine": 41,
          "endColumn": 6,
          "startByte": 488,
          "endByte": 819
        }
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }",
      "snippetWithContext": "func main() {/n    let foo = 42/n    if foo {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            print(/"Nested!/")/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "file_complexity.swift",
        "range": {
          "startLine": 7,
          "startColumn": 21,
          "endLine": 19,
          "endColumn": 22,
          "startByte": 146,
          "endByte": 669
        }
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if bar % 3 == 0 {/n                        print(/"Nested!/")/n                    }",
      "snippetWithContext": "func simple() {/n    print(/"This is a simple function/")/n}/n/nfunc complex() {/n    let bar = 42/n    if bar {/n        if bar > 10 {/n            if bar < 20 {/n                if bar % 2 == 0 {/n                    if bar % 3 == 0 {/n                        print(/"Nested!/")/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "function_complexity.swift",
        "range": {
          "startLine": 11,
          "startColumn": 21,
          "endLine": 13,
          "endColumn": 22,
          "startByte": 207,
          "endByte": 287
        }
      },
      "mode": "MODE_COMMENT"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_SWIFT",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }",
      "snippetWithContext": "/nfunc f2(foo: Int) -> String {/n    if foo == 1 {/n        return /"bar1/"/n    } else if foo == 2 {/n        return /"bar2/"/n    } else if foo == 3 {/n        return /"bar3/"/n    } else if foo == 4 {/n        return /"bar4/"/n    } else if foo == 5 {/n        return /"bar5/"/n    } else if foo == 6 {/n        return /"bar6/"/n    } else if foo == 7 {/n        return /"bar7/"/n    } else if foo == 8 {/n        return /"bar8/"/n    } else if foo == 9 {/n        return /"bar9/"/n    } else if foo == 10 {/n        return /"bar10/"/n    } else {/n        fatalError(/"Invalid foo value/")/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "nested_control.swift",
        "range": {
          "startLine": 27,
          "startColumn": 12,
          "endLine": 41,
          "endColumn": 6,
          "startByte": 488,
          "endByte": 819
        }
      },
      "mode": "MODE_COMMENT"
    }
  ],
  "stats": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "BooleanLogic.swift",
      "fullyQualifiedName": "BooleanLogic.swift",
      "path": "BooleanLogic.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 2,
      "functions": 2,
      "fields": 6,
      "lines": 22,
      "codeLines": 19,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "FileComplexity.swift",
      "fullyQualifiedName": "FileComplexity.swift",
      "path": "FileComplexity.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 1,
      "lines": 24,
      "codeLines": 24,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 55,
      "cyclomatic": 11,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "FunctionComplexity.swift",
      "fullyQualifiedName": "FunctionComplexity.swift",
      "path": "FunctionComplexity.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 1,
      "lines": 18,
      "codeLines": 17,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 15,
      "cyclomatic": 6,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Identical.swift",
      "fullyQualifiedName": "Identical.swift",
      "path": "Identical.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 3,
      "lines": 37,
      "codeLines": 30,
      "commentLines": 1,
      "blankLines": 6,
      "complexity": 8,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Lines.swift",
      "fullyQualifiedName": "Lines.swift",
      "path": "Lines.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 3,
      "fields": 0,
      "lines": 29,
      "codeLines": 11,
      "commentLines": 8,
      "blankLines": 10,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "NestedControl.swift",
      "fullyQualifiedName": "NestedControl.swift",
      "path": "NestedControl.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 4,
      "lines": 42,
      "codeLines": 40,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 65,
      "cyclomatic": 15,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Returns.swift",
      "fullyQualifiedName": "Returns.swift",
      "path": "Returns.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 5,
      "fields": 0,
      "lines": 39,
      "codeLines": 34,
      "commentLines": 1,
      "blankLines": 4,
      "complexity": 10,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SwiftClosures.swift",
      "fullyQualifiedName": "SwiftClosures.swift",
      "path": "SwiftClosures.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 3,
      "fields": 7,
      "lines": 47,
      "codeLines": 29,
      "commentLines": 9,
      "blankLines": 9,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SwiftEnums.swift",
      "fullyQualifiedName": "SwiftEnums.swift",
      "path": "SwiftEnums.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 3,
      "functions": 3,
      "fields": 0,
      "lines": 53,
      "codeLines": 43,
      "commentLines": 4,
      "blankLines": 6,
      "complexity": 2,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SwiftExtensions.swift",
      "fullyQualifiedName": "SwiftExtensions.swift",
      "path": "SwiftExtensions.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 4,
      "lines": 37,
      "codeLines": 25,
      "commentLines": 6,
      "blankLines": 6,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SwiftProtocols.swift",
      "fullyQualifiedName": "SwiftProtocols.swift",
      "path": "SwiftProtocols.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 2,
      "functions": 2,
      "fields": 2,
      "lines": 32,
      "codeLines": 23,
      "commentLines": 1,
      "blankLines": 8,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SwiftStructs.swift",
      "fullyQualifiedName": "SwiftStructs.swift",
      "path": "SwiftStructs.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 3,
      "functions": 3,
      "fields": 10,
      "lines": 74,
      "codeLines": 48,
      "commentLines": 10,
      "blankLines": 16,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "boolean_logic.swift",
      "fullyQualifiedName": "boolean_logic.swift",
      "path": "boolean_logic.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 3,
      "lines": 11,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "class_example.swift",
      "fullyQualifiedName": "class_example.swift",
      "path": "class_example.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 3,
      "lines": 23,
      "codeLines": 18,
      "commentLines": 1,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountConditionalAssignment.swift",
      "fullyQualifiedName": "cognitive/CountConditionalAssignment.swift",
      "path": "cognitive/CountConditionalAssignment.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 2,
      "lines": 9,
      "codeLines": 6,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountFunctionWithTernary.swift",
      "fullyQualifiedName": "cognitive/CountFunctionWithTernary.swift",
      "path": "cognitive/CountFunctionWithTernary.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 1,
      "lines": 6,
      "codeLines": 4,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountNonSequentialLogicalOperators.swift",
      "fullyQualifiedName": "cognitive/CountNonSequentialLogicalOperators.swift",
      "path": "cognitive/CountNonSequentialLogicalOperators.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 3,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountRecursion.swift",
      "fullyQualifiedName": "cognitive/CountRecursion.swift",
      "path": "cognitive/CountRecursion.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 6,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MultipleConditionals.swift",
      "fullyQualifiedName": "cognitive/MultipleConditionals.swift",
      "path": "cognitive/MultipleConditionals.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 27,
      "codeLines": 25,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 19,
      "cyclomatic": 8,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloBasic.swift",
      "fullyQualifiedName": "cyclomatic/CycloBasic.swift",
      "path": "cyclomatic/CycloBasic.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 3,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIf.swift",
      "fullyQualifiedName": "cyclomatic/CycloIf.swift",
      "path": "cyclomatic/CycloIf.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 6,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElse.swift",
      "fullyQualifiedName": "cyclomatic/CycloIfElse.swift",
      "path": "cyclomatic/CycloIfElse.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElseIf.swift",
      "fullyQualifiedName": "cyclomatic/CycloIfElseIf.swift",
      "path": "cyclomatic/CycloIfElseIf.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 10,
      "codeLines": 8,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElseIfElse.swift",
      "fullyQualifiedName": "cyclomatic/CycloIfElseIfElse.swift",
      "path": "cyclomatic/CycloIfElseIfElse.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 11,
      "codeLines": 9,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "EmptyFunction.swift",
      "fullyQualifiedName": "cyclomatic/EmptyFunction.swift",
      "path": "cyclomatic/EmptyFunction.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 2,
      "commentLines": 2,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "EmptyIf.swift",
      "fullyQualifiedName": "cyclomatic/EmptyIf.swift",
      "path": "cyclomatic/EmptyIf.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 4,
      "commentLines": 2,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IfWithBool.swift",
      "fullyQualifiedName": "cyclomatic/IfWithBool.swift",
      "path": "cyclomatic/IfWithBool.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 6,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeForOf.swift",
      "fullyQualifiedName": "cyclomatic/IterativeForOf.swift",
      "path": "cyclomatic/IterativeForOf.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 1,
      "lines": 9,
      "codeLines": 6,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeMap.swift",
      "fullyQualifiedName": "cyclomatic/IterativeMap.swift",
      "path": "cyclomatic/IterativeMap.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 2,
      "lines": 11,
      "codeLines": 7,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeMethodsWithFilterAndInclude.swift",
      "fullyQualifiedName": "cyclomatic/IterativeMethodsWithFilterAndInclude.swift",
      "path": "cyclomatic/IterativeMethodsWithFilterAndInclude.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 2,
      "lines": 15,
      "codeLines": 11,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "WhileLoop.swift",
      "fullyQualifiedName": "cyclomatic/WhileLoop.swift",
      "path": "cyclomatic/WhileLoop.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 1,
      "lines": 10,
      "codeLines": 7,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "ClassDeclaration.swift",
      "fullyQualifiedName": "fields/ClassDeclaration.swift",
      "path": "fields/ClassDeclaration.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 2,
      "functions": 2,
      "fields": 3,
      "lines": 25,
      "codeLines": 19,
      "commentLines": 2,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "GetterSetterDeclaration.swift",
      "fullyQualifiedName": "fields/GetterSetterDeclaration.swift",
      "path": "fields/GetterSetterDeclaration.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 0,
      "fields": 4,
      "lines": 30,
      "codeLines": 22,
      "commentLines": 4,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Multiple.swift",
      "fullyQualifiedName": "fields/Multiple.swift",
      "path": "fields/Multiple.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 0,
      "fields": 5,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Other.swift",
      "fullyQualifiedName": "fields/Other.swift",
      "path": "fields/Other.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 0,
      "fields": 5,
      "lines": 20,
      "codeLines": 9,
      "commentLines": 6,
      "blankLines": 5,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "PrivateFieldDeclaration.swift",
      "fullyQualifiedName": "fields/PrivateFieldDeclaration.swift",
      "path": "fields/PrivateFieldDeclaration.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 1,
      "lines": 13,
      "codeLines": 9,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "PublicFieldDeclaration.swift",
      "fullyQualifiedName": "fields/PublicFieldDeclaration.swift",
      "path": "fields/PublicFieldDeclaration.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 10,
      "codeLines": 6,
      "commentLines": 2,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Read.swift",
      "fullyQualifiedName": "fields/Read.swift",
      "path": "fields/Read.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 1,
      "lines": 13,
      "codeLines": 9,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "StaticFieldDeclaration.swift",
      "fullyQualifiedName": "fields/StaticFieldDeclaration.swift",
      "path": "fields/StaticFieldDeclaration.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 16,
      "codeLines": 9,
      "commentLines": 4,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Unique.swift",
      "fullyQualifiedName": "fields/Unique.swift",
      "path": "fields/Unique.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 0,
      "fields": 3,
      "lines": 18,
      "codeLines": 14,
      "commentLines": 2,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Write.swift",
      "fullyQualifiedName": "fields/Write.swift",
      "path": "fields/Write.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 1,
      "lines": 13,
      "codeLines": 9,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "file_complexity.swift",
      "fullyQualifiedName": "file_complexity.swift",
      "path": "file_complexity.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 1,
      "lines": 24,
      "codeLines": 24,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 55,
      "cyclomatic": 11,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "function_complexity.swift",
      "fullyQualifiedName": "function_complexity.swift",
      "path": "function_complexity.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 1,
      "lines": 18,
      "codeLines": 17,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 15,
      "cyclomatic": 6,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MethodsWithParams.swift",
      "fullyQualifiedName": "functions/MethodsWithParams.swift",
      "path": "functions/MethodsWithParams.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 2,
      "lines": 27,
      "codeLines": 19,
      "commentLines": 3,
      "blankLines": 5,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MethodsWithoutParams.swift",
      "fullyQualifiedName": "functions/MethodsWithoutParams.swift",
      "path": "functions/MethodsWithoutParams.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 4,
      "fields": 2,
      "lines": 22,
      "codeLines": 15,
      "commentLines": 2,
      "blankLines": 5,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SingletonMethodsWithParams.swift",
      "fullyQualifiedName": "functions/SingletonMethodsWithParams.swift",
      "path": "functions/SingletonMethodsWithParams.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 1,
      "lines": 26,
      "codeLines": 16,
      "commentLines": 5,
      "blankLines": 5,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SingletonMethodsWithoutParams.swift",
      "fullyQualifiedName": "functions/SingletonMethodsWithoutParams.swift",
      "path": "functions/SingletonMethodsWithoutParams.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 1,
      "lines": 26,
      "codeLines": 16,
      "commentLines": 5,
      "blankLines": 5,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 2
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_0.swift",
      "fullyQualifiedName": "lcom/lcom_0.swift",
      "path": "lcom/lcom_0.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 2,
      "functions": 5,
      "fields": 2,
      "lines": 29,
      "codeLines": 21,
      "commentLines": 1,
      "blankLines": 7,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1-1.swift",
      "fullyQualifiedName": "lcom/lcom_1-1.swift",
      "path": "lcom/lcom_1-1.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 9,
      "codeLines": 5,
      "commentLines": 2,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1.swift",
      "fullyQualifiedName": "lcom/lcom_1.swift",
      "path": "lcom/lcom_1.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 9,
      "codeLines": 6,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_2.swift",
      "fullyQualifiedName": "lcom/lcom_2.swift",
      "path": "lcom/lcom_2.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 2,
      "functions": 7,
      "fields": 3,
      "lines": 38,
      "codeLines": 28,
      "commentLines": 1,
      "blankLines": 9,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 2
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "nested_control.swift",
      "fullyQualifiedName": "nested_control.swift",
      "path": "nested_control.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 4,
      "lines": 42,
      "codeLines": 40,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 65,
      "cyclomatic": 15,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "parameters.swift",
      "fullyQualifiedName": "parameters.swift",
      "path": "parameters.swift",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_SWIFT",
      "files": 1,
      "classes": 0,
      "functions": 5,
      "fields": 1,
      "lines": 20,
      "codeLines": 15,
      "commentLines": 1,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cognitive",
      "fullyQualifiedName": "cognitive",
      "path": "cognitive",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 5,
      "classes": 0,
      "functions": 5,
      "fields": 3,
      "lines": 55,
      "codeLines": 44,
      "commentLines": 5,
      "blankLines": 6,
      "complexity": 23,
      "cyclomatic": 16,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclomatic",
      "fullyQualifiedName": "cyclomatic",
      "path": "cyclomatic",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 12,
      "classes": 0,
      "functions": 12,
      "fields": 6,
      "lines": 108,
      "codeLines": 76,
      "commentLines": 14,
      "blankLines": 18,
      "complexity": 12,
      "cyclomatic": 22,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "fields",
      "fullyQualifiedName": "fields",
      "path": "fields",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 10,
      "classes": 11,
      "functions": 10,
      "fields": 26,
      "lines": 167,
      "codeLines": 113,
      "commentLines": 24,
      "blankLines": 30,
      "complexity": 0,
      "cyclomatic": 10,
      "lcom4": 2
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "functions",
      "fullyQualifiedName": "functions",
      "path": "functions",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 4,
      "functions": 13,
      "fields": 6,
      "lines": 101,
      "codeLines": 66,
      "commentLines": 15,
      "blankLines": 20,
      "complexity": 2,
      "cyclomatic": 6,
      "lcom4": 4
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom",
      "fullyQualifiedName": "lcom",
      "path": "lcom",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 6,
      "functions": 14,
      "fields": 6,
      "lines": 85,
      "codeLines": 60,
      "commentLines": 5,
      "blankLines": 20,
      "complexity": 0,
      "cyclomatic": 4,
      "lcom4": 3
    }
  ]
}
