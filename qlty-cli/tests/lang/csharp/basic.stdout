{
  "metadata": {
    "buildId": "[..]",
    "result": "ANALYSIS_RESULT_SUCCESS",
    "filesAnalyzed": 43,
    "startTime": "[..]",
    "finishTime": "[..]",
    "commitMessage": "initial/n",
    "committedAt": "2024-01-01T00:00:00+00:00",
    "committerEmail": "test@codeclimate.com",
    "committerName": "TEST",
    "authorEmail": "test@codeclimate.com",
    "authorName": "TEST",
    "authoredAt": "2024-01-01T00:00:00+00:00"
  },
  "messages": [],
  "invocations": [],
  "issues": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 25 lines of similar code in 2 locations (mass = 125)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "public static double[] f0(double[] numbers)/n    {/n        double sum = 0;/n        foreach (double num in numbers)/n        {/n            sum += num;/n        }/n        double mean = sum / numbers.Length;/n/n        double[] sortedNumbers = (double[])numbers.Clone();/n        Array.Sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.Length;/n        if (length % 2 == 0)/n        {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        }/n        else/n        {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }",
      "snippetWithContext": "using System;/n/npublic class Identical/n{/n    public static double[] f0(double[] numbers)/n    {/n        double sum = 0;/n        foreach (double num in numbers)/n        {/n            sum += num;/n        }/n        double mean = sum / numbers.Length;/n/n        double[] sortedNumbers = (double[])numbers.Clone();/n        Array.Sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.Length;/n        if (length % 2 == 0)/n        {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        }/n        else/n        {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }/n/n    public static double[] f1(double[] numbers)/n    {/n        double sum = 0;/n        foreach (double num in numbers)/n        {/n            sum += num;/n        }/n        double mean = sum / numbers.Length;/n/n        double[] sortedNumbers = (double[])numbers.Clone();",
      "effortMinutes": 60,
      "value": 25,
      "valueDelta": 10,
      "location": {
        "path": "Identical.cs",
        "range": {
          "startLine": 5,
          "endLine": 29,
          "startByte": 44,
          "endByte": 679
        }
      },
      "otherLocations": [
        {
          "path": "Identical.cs",
          [..]
          [..]
          [..]
          [..]
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 25 lines of similar code in 2 locations (mass = 125)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "public static double[] f1(double[] numbers)/n    {/n        double sum = 0;/n        foreach (double num in numbers)/n        {/n            sum += num;/n        }/n        double mean = sum / numbers.Length;/n/n        double[] sortedNumbers = (double[])numbers.Clone();/n        Array.Sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.Length;/n        if (length % 2 == 0)/n        {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        }/n        else/n        {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }",
      "snippetWithContext": "        }/n        else/n        {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }/n/n    public static double[] f1(double[] numbers)/n    {/n        double sum = 0;/n        foreach (double num in numbers)/n        {/n            sum += num;/n        }/n        double mean = sum / numbers.Length;/n/n        double[] sortedNumbers = (double[])numbers.Clone();/n        Array.Sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.Length;/n        if (length % 2 == 0)/n        {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        }/n        else/n        {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }/n}",
      "effortMinutes": 60,
      "value": 25,
      "valueDelta": 10,
      "location": {
        "path": "Identical.cs",
        "range": {
          "startLine": 31,
          "endLine": 55,
          "startByte": 685,
          "endByte": 1320
        }
      },
      "otherLocations": [
        {
          "path": "Identical.cs",
          [..]
          [..]
          [..]
          [..]
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "foo && bar",
      "snippetWithContext": "public class BooleanLogic1/n{/n    private bool foo;/n    private bool bar;/n    private bool baz;/n    private bool qux;/n    private bool zoo;/n/n    private void F1()/n    {/n        if (foo && bar && baz && qux && zoo)/n        {/n            return;/n        }/n    }/n}/n",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "BooleanLogic.cs",
        "range": {
          "startLine": 22,
          "startColumn": 13,
          "endLine": 22,
          "endColumn": 23,
          "startByte": 319,
          "endByte": 329
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "false && true",
      "snippetWithContext": "namespace cognitive/n{/n  class CountNonSequentialLogicalOperators {/n    public static boolean Main(string[] args) {/n      return true || false && true && false || true;/n    }/n  }/n}",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "cognitive/CountNonSequentialLogicalOperators.cs",
        "range": {
          "startLine": 5,
          "startColumn": 22,
          "endLine": 5,
          "endColumn": 35,
          "startByte": 136,
          "endByte": 149
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 55)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "using System;/n/npublic class FileComplexity/n{/n    public static void Main(string[] args)/n    {/n        int foo = 42;/n        /n        if (foo > 0)/n        {/n            if (foo > 10)/n            {/n                if (foo < 20)/n                {/n                    if (foo % 2 == 0)/n                    {/n                        if (foo % 3 == 0)/n                        {/n                            if (foo % 5 == 0)/n                            {/n                                if (foo % 7 == 0)/n                                {/n                                    if (foo % 11 == 0)/n                                    {/n                                        if (foo % 13 == 0)/n                                        {/n                                            if (foo % 17 == 0)/n                                            {/n                                                Console.WriteLine(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}/n",
      "snippetWithContext": "using System;/n/npublic class FileComplexity/n{/n    public static void Main(string[] args)/n    {/n        int foo = 42;/n        /n        if (foo > 0)/n        {/n            if (foo > 10)/n            {/n                if (foo < 20)/n                {/n                    if (foo % 2 == 0)/n                    {/n                        if (foo % 3 == 0)/n                        {/n                            if (foo % 5 == 0)/n                            {/n                                if (foo % 7 == 0)/n                                {/n                                    if (foo % 11 == 0)/n                                    {/n                                        if (foo % 13 == 0)/n                                        {/n                                            if (foo % 17 == 0)/n                                            {/n                                                Console.WriteLine(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 150,
      "value": 55,
      "valueDelta": 5,
      "location": {
        "path": "FileComplexity.cs",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 42,
          "endColumn": 1,
          "startByte": 0,
          "endByte": 1201
        }
      },
      "partialFingerprints": {
        "file.path": "FileComplexity.cs"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): Main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "public static void Main(string[] args)/n    {/n        int foo = 42;/n        /n        if (foo > 0)/n        {/n            if (foo > 10)/n            {/n                if (foo < 20)/n                {/n                    if (foo % 2 == 0)/n                    {/n                        if (foo % 3 == 0)/n                        {/n                            if (foo % 5 == 0)/n                            {/n                                if (foo % 7 == 0)/n                                {/n                                    if (foo % 11 == 0)/n                                    {/n                                        if (foo % 13 == 0)/n                                        {/n                                            if (foo % 17 == 0)/n                                            {/n                                                Console.WriteLine(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }",
      "snippetWithContext": "using System;/n/npublic class FileComplexity/n{/n    public static void Main(string[] args)/n    {/n        int foo = 42;/n        /n        if (foo > 0)/n        {/n            if (foo > 10)/n            {/n                if (foo < 20)/n                {/n                    if (foo % 2 == 0)/n                    {/n                        if (foo % 3 == 0)/n                        {/n                            if (foo % 5 == 0)/n                            {/n                                if (foo % 7 == 0)/n                                {/n                                    if (foo % 11 == 0)/n                                    {/n                                        if (foo % 13 == 0)/n                                        {/n                                            if (foo % 17 == 0)/n                                            {/n                                                Console.WriteLine(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "FileComplexity.cs",
        "range": {
          "startLine": 5,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 6,
          "startByte": 49,
          "endByte": 1198
        }
      },
      "partialFingerprints": {
        "function.name": "Main"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-parameters",
      "message": "Function with many parameters (count = 6): F2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "(object a, object b, object c, object d, object e, object f)",
      "snippetWithContext": "public class Parameters/n{/n    public static void F0()/n    {/n    }/n/n    public static void F1(object dog, object cat)/n    {/n    }/n/n    public static void F2(object a, object b, object c, object d, object e, object f)/n    {/n    }/n/n    public static void F3()/n    {/n        object foo = Bar(1, 2, 3, 4);/n    }/n/n    public static object Bar(int a, int b, int c, int d)/n    {",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "Parameters.cs",
        "range": {
          "startLine": 13,
          "startColumn": 26,
          "endLine": 13,
          "endColumn": 86,
          "startByte": 170,
          "endByte": 230
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if (foo % 3 == 0)/n                        {/n                            if (foo % 5 == 0)/n                            {/n                                if (foo % 7 == 0)/n                                {/n                                    if (foo % 11 == 0)/n                                    {/n                                        if (foo % 13 == 0)/n                                        {/n                                            if (foo % 17 == 0)/n                                            {/n                                                Console.WriteLine(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }",
      "snippetWithContext": "        int foo = 42;/n        /n        if (foo > 0)/n        {/n            if (foo > 10)/n            {/n                if (foo < 20)/n                {/n                    if (foo % 2 == 0)/n                    {/n                        if (foo % 3 == 0)/n                        {/n                            if (foo % 5 == 0)/n                            {/n                                if (foo % 7 == 0)/n                                {/n                                    if (foo % 11 == 0)/n                                    {/n                                        if (foo % 13 == 0)/n                                        {/n                                            if (foo % 17 == 0)/n                                            {/n                                                Console.WriteLine(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "FileComplexity.cs",
        "range": {
          "startLine": 17,
          "startColumn": 25,
          "endLine": 35,
          "endColumn": 26,
          "startByte": 328,
          "endByte": 1128
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if (bar % 3 == 0)/n                        {/n                            Console.WriteLine(/"Nested!/");/n                        }",
      "snippetWithContext": "        int bar = 42;/n/n        if (bar > 0)/n        {/n            if (bar > 10)/n            {/n                if (bar < 20)/n                {/n                    if (bar % 2 == 0)/n                    {/n                        if (bar % 3 == 0)/n                        {/n                            Console.WriteLine(/"Nested!/");/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "FunctionComplexity.cs",
        "range": {
          "startLine": 21,
          "startColumn": 25,
          "endLine": 24,
          "endColumn": 26,
          "startByte": 345,
          "endByte": 472
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 10): F2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "public static string F2(int foo)/n    {/n        switch (foo)/n        {/n            case 1:/n                return /"bar1/";/n            case 2:/n                return /"bar2/";/n            case 3:/n                return /"bar3/";/n            case 4:/n                return /"bar4/";/n            case 5:/n                return /"bar5/";/n            case 6:/n                return /"bar6/";/n            case 7:/n                return /"bar7/";/n            case 8:/n                return /"bar8/";/n            case 9:/n                return /"bar9/";/n            case 10:/n                return /"bar10/";/n            default:/n                throw new ArgumentException(/"Invalid foo value/");/n        }/n    }",
      "snippetWithContext": "                {/n                    if (quux)/n                    {/n                        Console.WriteLine(/"Not deeply nested enough!/");/n                    }/n                }/n            }/n        }/n    }/n/n    public static string F2(int foo)/n    {/n        switch (foo)/n        {/n            case 1:/n                return /"bar1/";/n            case 2:/n                return /"bar2/";/n            case 3:/n                return /"bar3/";/n            case 4:/n                return /"bar4/";/n            case 5:/n                return /"bar5/";/n            case 6:/n                return /"bar6/";/n            case 7:/n                return /"bar7/";/n            case 8:/n                return /"bar8/";/n            case 9:/n                return /"bar9/";/n            case 10:/n                return /"bar10/";/n            default:/n                throw new ArgumentException(/"Invalid foo value/");/n        }/n    }/n}",
      "effortMinutes": 35,
      "value": 10,
      "valueDelta": 4,
      "location": {
        "path": "NestedControl.cs",
        "range": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 6,
          "startByte": 714,
          "endByte": 1398
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 6): Main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_C_SHARP",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "public static string Main(int foo) {/n      if (foo >= 80 && foo <= 100) {/n        return /"Most complex!/";/n      } else if (foo >= 60 && foo <= 79) {/n        return /"Very complex/";/n      } else if (foo >= 40 && foo <= 59) {/n        return /"Somewhat complex/";/n      } else if (foo >= 20 && foo <= 39) {/n        return /"Not complex/";/n      } else if (foo >= 0 && foo <= 19) {/n        return /"Least complex!/";/n      } else {/n        return null;/n      }/n    }",
      "snippetWithContext": "namespace cognitive/n{/n  class MultipleConditionals {/n    public static string Main(int foo) {/n      if (foo >= 80 && foo <= 100) {/n        return /"Most complex!/";/n      } else if (foo >= 60 && foo <= 79) {/n        return /"Very complex/";/n      } else if (foo >= 40 && foo <= 59) {/n        return /"Somewhat complex/";/n      } else if (foo >= 20 && foo <= 39) {/n        return /"Not complex/";/n      } else if (foo >= 0 && foo <= 19) {/n        return /"Least complex!/";/n      } else {/n        return null;/n      }/n    }/n  }/n}",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "cognitive/MultipleConditionals.cs",
        "range": {
          "startLine": 4,
          "startColumn": 5,
          "endLine": 18,
          "endColumn": 6,
          "startByte": 57,
          "endByte": 512
        }
      },
      "mode": "MODE_BLOCK"
    }
  ],
  "stats": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "BooleanLogic.cs",
      "fullyQualifiedName": "BooleanLogic.cs",
      "path": "BooleanLogic.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 2,
      "functions": 2,
      "fields": 5,
      "lines": 28,
      "codeLines": 22,
      "commentLines": 0,
      "blankLines": 6,
      "complexity": 2,
      "cyclomatic": 8,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "FileComplexity.cs",
      "fullyQualifiedName": "FileComplexity.cs",
      "path": "FileComplexity.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 41,
      "codeLines": 29,
      "commentLines": 0,
      "blankLines": 12,
      "complexity": 55,
      "cyclomatic": 28,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "FunctionComplexity.cs",
      "fullyQualifiedName": "FunctionComplexity.cs",
      "path": "FunctionComplexity.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 0,
      "lines": 30,
      "codeLines": 21,
      "commentLines": 0,
      "blankLines": 9,
      "complexity": 15,
      "cyclomatic": 13,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Identical.cs",
      "fullyQualifiedName": "Identical.cs",
      "path": "Identical.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 0,
      "lines": 56,
      "codeLines": 37,
      "commentLines": 0,
      "blankLines": 19,
      "complexity": 6,
      "cyclomatic": 23,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Lines.cs",
      "fullyQualifiedName": "Lines.cs",
      "path": "Lines.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 5,
      "fields": 0,
      "lines": 57,
      "codeLines": 32,
      "commentLines": 7,
      "blankLines": 18,
      "complexity": 1,
      "cyclomatic": 3,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "NestedControl.cs",
      "fullyQualifiedName": "NestedControl.cs",
      "path": "NestedControl.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 0,
      "lines": 62,
      "codeLines": 48,
      "commentLines": 0,
      "blankLines": 14,
      "complexity": 15,
      "cyclomatic": 24,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Parameters.cs",
      "fullyQualifiedName": "Parameters.cs",
      "path": "Parameters.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 5,
      "fields": 0,
      "lines": 26,
      "codeLines": 17,
      "commentLines": 0,
      "blankLines": 9,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Returns.cs",
      "fullyQualifiedName": "Returns.cs",
      "path": "Returns.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 5,
      "fields": 0,
      "lines": 61,
      "codeLines": 34,
      "commentLines": 0,
      "blankLines": 27,
      "complexity": 9,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountConditionalAssignment.cs",
      "fullyQualifiedName": "cognitive/CountConditionalAssignment.cs",
      "path": "cognitive/CountConditionalAssignment.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 16,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 3,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountFunctionWithTernary.cs",
      "fullyQualifiedName": "cognitive/CountFunctionWithTernary.cs",
      "path": "cognitive/CountFunctionWithTernary.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 4,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountNonSequentialLogicalOperators.cs",
      "fullyQualifiedName": "cognitive/CountNonSequentialLogicalOperators.cs",
      "path": "cognitive/CountNonSequentialLogicalOperators.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountRecursion.cs",
      "fullyQualifiedName": "cognitive/CountRecursion.cs",
      "path": "cognitive/CountRecursion.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MultipleConditionals.cs",
      "fullyQualifiedName": "cognitive/MultipleConditionals.cs",
      "path": "cognitive/MultipleConditionals.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 20,
      "codeLines": 19,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 7,
      "cyclomatic": 21,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloBasic.cs",
      "fullyQualifiedName": "cyclomatic/CycloBasic.cs",
      "path": "cyclomatic/CycloBasic.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIf.cs",
      "fullyQualifiedName": "cyclomatic/CycloIf.cs",
      "path": "cyclomatic/CycloIf.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 11,
      "codeLines": 11,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElse.cs",
      "fullyQualifiedName": "cyclomatic/CycloIfElse.cs",
      "path": "cyclomatic/CycloIfElse.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 13,
      "codeLines": 12,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElseIf.cs",
      "fullyQualifiedName": "cyclomatic/CycloIfElseIf.cs",
      "path": "cyclomatic/CycloIfElseIf.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 13,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElseIfElse.cs",
      "fullyQualifiedName": "cyclomatic/CycloIfElseIfElse.cs",
      "path": "cyclomatic/CycloIfElseIfElse.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 15,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 3,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "EmptyFunction.cs",
      "fullyQualifiedName": "cyclomatic/EmptyFunction.cs",
      "path": "cyclomatic/EmptyFunction.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 6,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "EmptyIf.cs",
      "fullyQualifiedName": "cyclomatic/EmptyIf.cs",
      "path": "cyclomatic/EmptyIf.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 9,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IfWithBool.cs",
      "fullyQualifiedName": "cyclomatic/IfWithBool.cs",
      "path": "cyclomatic/IfWithBool.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 9,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeForOf.cs",
      "fullyQualifiedName": "cyclomatic/IterativeForOf.cs",
      "path": "cyclomatic/IterativeForOf.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 12,
      "codeLines": 11,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeMap.cs",
      "fullyQualifiedName": "cyclomatic/IterativeMap.cs",
      "path": "cyclomatic/IterativeMap.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 17,
      "codeLines": 15,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeMethodsWithFilterAndInclude.cs",
      "fullyQualifiedName": "cyclomatic/IterativeMethodsWithFilterAndInclude.cs",
      "path": "cyclomatic/IterativeMethodsWithFilterAndInclude.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 20,
      "codeLines": 17,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 1,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "WhileLoop.cs",
      "fullyQualifiedName": "cyclomatic/WhileLoop.cs",
      "path": "cyclomatic/WhileLoop.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 0,
      "lines": 15,
      "codeLines": 12,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "ClassDeclaration.cs",
      "fullyQualifiedName": "fields/ClassDeclaration.cs",
      "path": "fields/ClassDeclaration.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 2,
      "functions": 3,
      "fields": 2,
      "lines": 31,
      "codeLines": 24,
      "commentLines": 1,
      "blankLines": 6,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "GetterSetterDeclaration.cs",
      "fullyQualifiedName": "fields/GetterSetterDeclaration.cs",
      "path": "fields/GetterSetterDeclaration.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 16,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Multiple.cs",
      "fullyQualifiedName": "fields/Multiple.cs",
      "path": "fields/Multiple.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 15,
      "codeLines": 12,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Other.cs",
      "fullyQualifiedName": "fields/Other.cs",
      "path": "fields/Other.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 15,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "PrivateFieldDeclaration.cs",
      "fullyQualifiedName": "fields/PrivateFieldDeclaration.cs",
      "path": "fields/PrivateFieldDeclaration.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 1,
      "lines": 17,
      "codeLines": 12,
      "commentLines": 1,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "PublicFieldDeclaration.cs",
      "fullyQualifiedName": "fields/PublicFieldDeclaration.cs",
      "path": "fields/PublicFieldDeclaration.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 12,
      "codeLines": 10,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Read.cs",
      "fullyQualifiedName": "fields/Read.cs",
      "path": "fields/Read.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 12,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "StaticFieldDeclaration.cs",
      "fullyQualifiedName": "fields/StaticFieldDeclaration.cs",
      "path": "fields/StaticFieldDeclaration.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 12,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Unique.cs",
      "fullyQualifiedName": "fields/Unique.cs",
      "path": "fields/Unique.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 13,
      "codeLines": 11,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Write.cs",
      "fullyQualifiedName": "fields/Write.cs",
      "path": "fields/Write.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 11,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MethodsWithParams.cs",
      "fullyQualifiedName": "functions/MethodsWithParams.cs",
      "path": "functions/MethodsWithParams.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 2,
      "lines": 18,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MethodsWithoutParams.cs",
      "fullyQualifiedName": "functions/MethodsWithoutParams.cs",
      "path": "functions/MethodsWithoutParams.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 4,
      "fields": 2,
      "lines": 22,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 8,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SingletonMethodsWithParams.cs",
      "fullyQualifiedName": "functions/SingletonMethodsWithParams.cs",
      "path": "functions/SingletonMethodsWithParams.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 13,
      "codeLines": 11,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SingletonMethodsWithoutParams.cs",
      "fullyQualifiedName": "functions/SingletonMethodsWithoutParams.cs",
      "path": "functions/SingletonMethodsWithoutParams.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_0.cs",
      "fullyQualifiedName": "lcom/lcom_0.cs",
      "path": "lcom/lcom_0.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 4,
      "functions": 6,
      "fields": 2,
      "lines": 48,
      "codeLines": 33,
      "commentLines": 0,
      "blankLines": 15,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1-1.cs",
      "fullyQualifiedName": "lcom/lcom_1-1.cs",
      "path": "lcom/lcom_1-1.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 0,
      "lines": 18,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 5,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1.cs",
      "fullyQualifiedName": "lcom/lcom_1.cs",
      "path": "lcom/lcom_1.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 1,
      "lines": 20,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 7,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_2.cs",
      "fullyQualifiedName": "lcom/lcom_2.cs",
      "path": "lcom/lcom_2.cs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_C_SHARP",
      "files": 1,
      "classes": 2,
      "functions": 7,
      "fields": 3,
      "lines": 47,
      "codeLines": 31,
      "commentLines": 0,
      "blankLines": 16,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 2
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cognitive",
      "fullyQualifiedName": "cognitive",
      "path": "cognitive",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 5,
      "classes": 5,
      "functions": 5,
      "fields": 0,
      "lines": 60,
      "codeLines": 57,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 15,
      "cyclomatic": 38,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclomatic",
      "fullyQualifiedName": "cyclomatic",
      "path": "cyclomatic",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 12,
      "classes": 12,
      "functions": 13,
      "fields": 0,
      "lines": 147,
      "codeLines": 135,
      "commentLines": 1,
      "blankLines": 11,
      "complexity": 14,
      "cyclomatic": 31,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "fields",
      "fullyQualifiedName": "fields",
      "path": "fields",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 10,
      "classes": 11,
      "functions": 13,
      "fields": 15,
      "lines": 154,
      "codeLines": 126,
      "commentLines": 4,
      "blankLines": 24,
      "complexity": 0,
      "cyclomatic": 11,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "functions",
      "fullyQualifiedName": "functions",
      "path": "functions",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 4,
      "functions": 8,
      "fields": 4,
      "lines": 60,
      "codeLines": 45,
      "commentLines": 0,
      "blankLines": 15,
      "complexity": 0,
      "cyclomatic": 6,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom",
      "fullyQualifiedName": "lcom",
      "path": "lcom",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 8,
      "functions": 19,
      "fields": 6,
      "lines": 133,
      "codeLines": 90,
      "commentLines": 0,
      "blankLines": 43,
      "complexity": 0,
      "cyclomatic": 4,
      "lcom4": 4
    }
  ]
}
