{
  "metadata": {
    "id": "[..]",
    "buildId": "[..]",
    "result": "ANALYSIS_RESULT_SUCCESS",
    "filesAnalyzed": 33,
    "startTime": "[..]",
    "finishTime": "[..]",
    "commitMessage": "initial/n",
    "committedAt": "2024-01-01T00:00:00+00:00",
    "committerEmail": "test@codeclimate.com",
    "committerName": "TEST",
    "authorEmail": "test@codeclimate.com",
    "authorName": "TEST",
    "authoredAt": "2024-01-01T00:00:00+00:00"
  },
  "messages": [],
  "invocations": [],
  "issues": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 21 lines of similar code in 2 locations (mass = 121)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "func f0(numbers []float64) (float64, float64) {/n/tsum := 0.0/n/tfor _, num := range numbers {/n/t/tsum += num/n/t}/n/tmean := sum / float64(len(numbers))/n/n/tsortedNumbers := make([]float64, len(numbers))/n/tcopy(sortedNumbers, numbers)/n/tsort.Float64s(sortedNumbers)/n/n/tvar median float64/n/tmidIndex := len(sortedNumbers) / 2/n/tif len(sortedNumbers)%2 == 0 {/n/t/tmedian = (sortedNumbers[midIndex-1] + sortedNumbers[midIndex]) / 2/n/t} else {/n/t/tmedian = sortedNumbers[midIndex]/n/t}/n/n/treturn mean, median/n}",
      "snippetWithContext": "func f0(numbers []float64) (float64, float64) {/n/tsum := 0.0/n/tfor _, num := range numbers {/n/t/tsum += num/n/t}/n/tmean := sum / float64(len(numbers))/n/n/tsortedNumbers := make([]float64, len(numbers))/n/tcopy(sortedNumbers, numbers)/n/tsort.Float64s(sortedNumbers)/n/n/tvar median float64/n/tmidIndex := len(sortedNumbers) / 2/n/tif len(sortedNumbers)%2 == 0 {/n/t/tmedian = (sortedNumbers[midIndex-1] + sortedNumbers[midIndex]) / 2/n/t} else {/n/t/tmedian = sortedNumbers[midIndex]/n/t}/n/n/treturn mean, median/n}/n/nfunc f1(numbers []float64) (float64, float64) {/n/tsum := 0.0/n/tfor _, num := range numbers {/n/t/tsum += num/n/t}/n/tmean := sum / float64(len(numbers))/n/n/tsortedNumbers := make([]float64, len(numbers))/n/tcopy(sortedNumbers, numbers)/n/tsort.Float64s(sortedNumbers)",
      "effortMinutes": 40,
      "value": 21,
      "valueDelta": 6,
      "location": {
        "path": "identical.go",
        "range": {
          "startLine": 1,
          "endLine": 21,
          "startByte": 0,
          "endByte": 482
        }
      },
      "otherLocations": [
        {
          "path": "identical.go",
        [..]
        [..]
        [..]
        [..]
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 21 lines of similar code in 2 locations (mass = 121)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "func f1(numbers []float64) (float64, float64) {/n/tsum := 0.0/n/tfor _, num := range numbers {/n/t/tsum += num/n/t}/n/tmean := sum / float64(len(numbers))/n/n/tsortedNumbers := make([]float64, len(numbers))/n/tcopy(sortedNumbers, numbers)/n/tsort.Float64s(sortedNumbers)/n/n/tvar median float64/n/tmidIndex := len(sortedNumbers) / 2/n/tif len(sortedNumbers)%2 == 0 {/n/t/tmedian = (sortedNumbers[midIndex-1] + sortedNumbers[midIndex]) / 2/n/t} else {/n/t/tmedian = sortedNumbers[midIndex]/n/t}/n/n/treturn mean, median/n}",
      "snippetWithContext": "/tif len(sortedNumbers)%2 == 0 {/n/t/tmedian = (sortedNumbers[midIndex-1] + sortedNumbers[midIndex]) / 2/n/t} else {/n/t/tmedian = sortedNumbers[midIndex]/n/t}/n/n/treturn mean, median/n}/n/nfunc f1(numbers []float64) (float64, float64) {/n/tsum := 0.0/n/tfor _, num := range numbers {/n/t/tsum += num/n/t}/n/tmean := sum / float64(len(numbers))/n/n/tsortedNumbers := make([]float64, len(numbers))/n/tcopy(sortedNumbers, numbers)/n/tsort.Float64s(sortedNumbers)/n/n/tvar median float64/n/tmidIndex := len(sortedNumbers) / 2/n/tif len(sortedNumbers)%2 == 0 {/n/t/tmedian = (sortedNumbers[midIndex-1] + sortedNumbers[midIndex]) / 2/n/t} else {/n/t/tmedian = sortedNumbers[midIndex]/n/t}/n/n/treturn mean, median/n}",
      "effortMinutes": 40,
      "value": 21,
      "valueDelta": 6,
      "location": {
        "path": "identical.go",
        "range": {
          "startLine": 23,
          "endLine": 43,
          "startByte": 484,
          "endByte": 966
        }
      },
      "otherLocations": [
        {
          "path": "identical.go",
        [..]
        [..]
        [..]
        [..]
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "foo != 0 && bar != 0",
      "snippetWithContext": "func f0() int {/n/tx := foo - bar + 1/n/treturn x/n}/n/nfunc f1() {/n/tif foo != 0 && bar != 0 && baz != 0 && qux != 0 && quux != 0 {/n/t/treturn/n/t}/n}",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "boolean_logic.go",
        "range": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 7,
          "endColumn": 25,
          "startByte": 65,
          "endByte": 85
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 55)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func main() {/n/tfoo := 42/n    if foo {/n        if foo > 10 {/n            if foo <  20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            puts /"Nested!/"/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}/n",
      "snippetWithContext": "func main() {/n/tfoo := 42/n    if foo {/n        if foo > 10 {/n            if foo <  20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            puts /"Nested!/"/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 150,
      "value": 55,
      "valueDelta": 5,
      "location": {
        "path": "file_complexity.go",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 25,
          "endColumn": 1,
          "startByte": 0,
          "endByte": 713
        }
      },
      "partialFingerprints": {
        "file.path": "file_complexity.go"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func main() {/n/tfoo := 42/n    if foo {/n        if foo > 10 {/n            if foo <  20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            puts /"Nested!/"/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "snippetWithContext": "func main() {/n/tfoo := 42/n    if foo {/n        if foo > 10 {/n            if foo <  20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            puts /"Nested!/"/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "file_complexity.go",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 24,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 712
        }
      },
      "partialFingerprints": {
        "function.name": "main"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-parameters",
      "message": "Function with many parameters (count = 6): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "(a int, b int, c int, d int, e int, f int)",
      "snippetWithContext": "func f0() {/n}/n/nfunc f1(dog string, cat string) {/n}/n/nfunc f2(a int, b int, c int, d int, e int, f int) {/n}/n/nfunc f3() {/n/t// Function calls don't count, only function definitions/n/tfoo := bar(1, 2, 3, 4, 5)/n/tfmt.Println(foo)/n}",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "parameters.go",
        "range": {
          "startLine": 7,
          "startColumn": 8,
          "endLine": 7,
          "endColumn": 50,
          "startByte": 59,
          "endByte": 101
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            puts /"Nested!/"/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }",
      "snippetWithContext": "func main() {/n/tfoo := 42/n    if foo {/n        if foo > 10 {/n            if foo <  20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            puts /"Nested!/"/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "file_complexity.go",
        "range": {
          "startLine": 7,
          "startColumn": 21,
          "endLine": 19,
          "endColumn": 22,
          "startByte": 141,
          "endByte": 662
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if bar % 3 == 0 {/n                        puts /"Nested!/"/n                    }",
      "snippetWithContext": "func simple() {/n}/n/nfunc complex() {/n    bar := 42/n    if bar {/n        if bar > 10 {/n            if bar < 20 {/n                if bar % 2 == 0 {/n                    if bar % 3 == 0 {/n                        puts /"Nested!/"/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "function_complexity.go",
        "range": {
          "startLine": 10,
          "startColumn": 21,
          "endLine": 12,
          "endColumn": 22,
          "startByte": 165,
          "endByte": 243
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 11): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_GO",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "func f2(foo int) (string, error) {/n/tswitch foo {/n/tcase 1:/n/t/treturn /"bar1/", nil/n/tcase 2:/n/t/treturn /"bar2/", nil/n/tcase 3:/n/t/treturn /"bar3/", nil/n/tcase 4:/n/t/treturn /"bar4/", nil/n/tcase 5:/n/t/treturn /"bar5/", nil/n/tcase 6:/n/t/treturn /"bar6/", nil/n/tcase 7:/n/t/treturn /"bar7/", nil/n/tcase 8:/n/t/treturn /"bar8/", nil/n/tcase 9:/n/t/treturn /"bar9/", nil/n/tcase 10:/n/t/treturn /"bar10/", nil/n/tdefault:/n/t/treturn /"/", errors.New(/"invalid foo value/")/n/t}/n}",
      "snippetWithContext": "/t/tif baz {/n/t/t/tif qux {/n/t/t/t/tif quux {/n/t/t/t/t/tfmt.Println(/"Deeply nested!/")/n/t/t/t/t}/n/t/t/t}/n/t/t}/n/t}/n}/n/nfunc f2(foo int) (string, error) {/n/tswitch foo {/n/tcase 1:/n/t/treturn /"bar1/", nil/n/tcase 2:/n/t/treturn /"bar2/", nil/n/tcase 3:/n/t/treturn /"bar3/", nil/n/tcase 4:/n/t/treturn /"bar4/", nil/n/tcase 5:/n/t/treturn /"bar5/", nil/n/tcase 6:/n/t/treturn /"bar6/", nil/n/tcase 7:/n/t/treturn /"bar7/", nil/n/tcase 8:/n/t/treturn /"bar8/", nil/n/tcase 9:/n/t/treturn /"bar9/", nil/n/tcase 10:/n/t/treturn /"bar10/", nil/n/tdefault:/n/t/treturn /"/", errors.New(/"invalid foo value/")/n/t}/n}",
      "effortMinutes": 40,
      "value": 11,
      "valueDelta": 5,
      "location": {
        "path": "nested_control.go",
        "range": {
          "startLine": 33,
          "startColumn": 1,
          "endLine": 58,
          "endColumn": 2,
          "startByte": 477,
          "endByte": 887
        }
      },
      "mode": "MODE_BLOCK"
    }
  ],
  "stats": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "boolean_logic.go",
      "fullyQualifiedName": "boolean_logic.go",
      "path": "boolean_logic.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 10,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 2,
      "cyclomatic": 13,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_else.go",
      "fullyQualifiedName": "cognitive/count_else.go",
      "path": "cognitive/count_else.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 2,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_for.go",
      "fullyQualifiedName": "cognitive/count_for.go",
      "path": "cognitive/count_for.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_function_recursion.go",
      "fullyQualifiedName": "cognitive/count_function_recursion.go",
      "path": "cognitive/count_function_recursion.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 18,
      "codeLines": 14,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 5,
      "cyclomatic": 8,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_goto.go",
      "fullyQualifiedName": "cognitive/count_goto.go",
      "path": "cognitive/count_goto.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 11,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_if.go",
      "fullyQualifiedName": "cognitive/count_if.go",
      "path": "cognitive/count_if.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 11,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_labeled_break.go",
      "fullyQualifiedName": "cognitive/count_labeled_break.go",
      "path": "cognitive/count_labeled_break.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 13,
      "codeLines": 11,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 4,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nested_closures.go",
      "fullyQualifiedName": "cognitive/count_nested_closures.go",
      "path": "cognitive/count_nested_closures.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 19,
      "codeLines": 12,
      "commentLines": 4,
      "blankLines": 3,
      "complexity": 2,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nested_if.go",
      "fullyQualifiedName": "cognitive/count_nested_if.go",
      "path": "cognitive/count_nested_if.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 18,
      "codeLines": 15,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 7,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_select.go",
      "fullyQualifiedName": "cognitive/count_select.go",
      "path": "cognitive/count_select.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 22,
      "codeLines": 19,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 4,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_switch.go",
      "fullyQualifiedName": "cognitive/count_switch.go",
      "path": "cognitive/count_switch.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 16,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 4,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_type_switch.go",
      "fullyQualifiedName": "cognitive/count_type_switch.go",
      "path": "cognitive/count_type_switch.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 22,
      "codeLines": 19,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 1,
      "cyclomatic": 6,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "dont_count_unlabeled_break.go",
      "fullyQualifiedName": "cognitive/dont_count_unlabeled_break.go",
      "path": "cognitive/dont_count_unlabeled_break.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 14,
      "codeLines": 12,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 4,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_basic.go",
      "fullyQualifiedName": "cyclomatic/cyclo_basic.go",
      "path": "cyclomatic/cyclo_basic.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_for_loop.go",
      "fullyQualifiedName": "cyclomatic/cyclo_for_loop.go",
      "path": "cyclomatic/cyclo_for_loop.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 6,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_for_loop_nested.go",
      "fullyQualifiedName": "cyclomatic/cyclo_for_loop_nested.go",
      "path": "cyclomatic/cyclo_for_loop_nested.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_for_range.go",
      "fullyQualifiedName": "cyclomatic/cyclo_for_range.go",
      "path": "cyclomatic/cyclo_for_range.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 6,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_if.go",
      "fullyQualifiedName": "cyclomatic/cyclo_if.go",
      "path": "cyclomatic/cyclo_if.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 10,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_if_else.go",
      "fullyQualifiedName": "cyclomatic/cyclo_if_else.go",
      "path": "cyclomatic/cyclo_if_else.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 12,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 2,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_if_elsif.go",
      "fullyQualifiedName": "cyclomatic/cyclo_if_elsif.go",
      "path": "cyclomatic/cyclo_if_elsif.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 12,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_if_elsif_else.go",
      "fullyQualifiedName": "cyclomatic/cyclo_if_elsif_else.go",
      "path": "cyclomatic/cyclo_if_elsif_else.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 14,
      "codeLines": 11,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "class_declaration.go",
      "fullyQualifiedName": "fields/class_declaration.go",
      "path": "fields/class_declaration.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 4,
      "lines": 19,
      "codeLines": 16,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "struct_declaration.go",
      "fullyQualifiedName": "fields/struct_declaration.go",
      "path": "fields/struct_declaration.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 1,
      "functions": 0,
      "fields": 2,
      "lines": 4,
      "codeLines": 4,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "file_complexity.go",
      "fullyQualifiedName": "file_complexity.go",
      "path": "file_complexity.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 24,
      "codeLines": 24,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 55,
      "cyclomatic": 27,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "function_complexity.go",
      "fullyQualifiedName": "function_complexity.go",
      "path": "function_complexity.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 17,
      "codeLines": 16,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 15,
      "cyclomatic": 12,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "methods_with_parameters.go",
      "fullyQualifiedName": "functions/methods_with_parameters.go",
      "path": "functions/methods_with_parameters.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 2,
      "lines": 15,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "methods_without_parameters.go",
      "fullyQualifiedName": "functions/methods_without_parameters.go",
      "path": "functions/methods_without_parameters.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 1,
      "functions": 4,
      "fields": 2,
      "lines": 21,
      "codeLines": 17,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "identical.go",
      "fullyQualifiedName": "identical.go",
      "path": "identical.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 43,
      "codeLines": 34,
      "commentLines": 0,
      "blankLines": 9,
      "complexity": 6,
      "cyclomatic": 19,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_0.go",
      "fullyQualifiedName": "lcom/lcom_0.go",
      "path": "lcom/lcom_0.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 2,
      "functions": 3,
      "fields": 0,
      "lines": 17,
      "codeLines": 11,
      "commentLines": 1,
      "blankLines": 5,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lines.go",
      "fullyQualifiedName": "lines.go",
      "path": "lines.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 3,
      "fields": 0,
      "lines": 28,
      "codeLines": 15,
      "commentLines": 9,
      "blankLines": 4,
      "complexity": 1,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "nested_control.go",
      "fullyQualifiedName": "nested_control.go",
      "path": "nested_control.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 4,
      "fields": 0,
      "lines": 58,
      "codeLines": 54,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 26,
      "cyclomatic": 27,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "parameters.go",
      "fullyQualifiedName": "parameters.go",
      "path": "parameters.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 4,
      "fields": 0,
      "lines": 14,
      "codeLines": 10,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "returns.go",
      "fullyQualifiedName": "returns.go",
      "path": "returns.go",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_GO",
      "files": 1,
      "classes": 0,
      "functions": 5,
      "fields": 0,
      "lines": 24,
      "codeLines": 20,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cognitive",
      "fullyQualifiedName": "cognitive",
      "path": "cognitive",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 12,
      "classes": 0,
      "functions": 13,
      "fields": 0,
      "lines": 182,
      "codeLines": 148,
      "commentLines": 7,
      "blankLines": 27,
      "complexity": 31,
      "cyclomatic": 45,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclomatic",
      "fullyQualifiedName": "cyclomatic",
      "path": "cyclomatic",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 8,
      "classes": 0,
      "functions": 8,
      "fields": 0,
      "lines": 75,
      "codeLines": 60,
      "commentLines": 0,
      "blankLines": 15,
      "complexity": 13,
      "cyclomatic": 18,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "fields",
      "fullyQualifiedName": "fields",
      "path": "fields",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 2,
      "classes": 2,
      "functions": 1,
      "fields": 6,
      "lines": 23,
      "codeLines": 20,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "functions",
      "fullyQualifiedName": "functions",
      "path": "functions",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 2,
      "classes": 2,
      "functions": 6,
      "fields": 4,
      "lines": 36,
      "codeLines": 30,
      "commentLines": 0,
      "blankLines": 6,
      "complexity": 0,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom",
      "fullyQualifiedName": "lcom",
      "path": "lcom",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 1,
      "classes": 2,
      "functions": 3,
      "fields": 0,
      "lines": 17,
      "codeLines": 11,
      "commentLines": 1,
      "blankLines": 5,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    }
  ]
}
