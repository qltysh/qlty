{
  "metadata": {
    "id": "[..]",
    "buildId": "[..]",
    "result": "ANALYSIS_RESULT_SUCCESS",
    "filesAnalyzed": 59,
    "startTime": "[..]",
    "finishTime": "[..]",
    "commitMessage": "initial/n",
    "committedAt": "2024-01-01T00:00:00+00:00",
    "committerEmail": "test@codeclimate.com",
    "committerName": "TEST",
    "authorEmail": "test@codeclimate.com",
    "authorName": "TEST",
    "authoredAt": "2024-01-01T00:00:00+00:00"
  },
  "messages": [],
  "invocations": [],
  "issues": [
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "(foo0 and foo1)/n        or (foo2 or foo3)/n        or (foo4 and foo9)/n        or (foo4 or foo9)/n        or (foo6 and foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)",
      "snippetWithContext": "def logical_sequences():/n    (/n        (foo0 and foo1)/n        or (foo2 or foo3)/n        or (foo4 and foo9)/n        or (foo4 or foo9)/n        or (foo6 and foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo7 and foo8)/n    )",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "cognitive/count_complex_logical_operator_sequence.py",
        "range": {
          "startLine": 3,
          "startColumn": 9,
          "endLine": 11,
          "endColumn": 26,
          "startByte": 39,
          "endByte": 264
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "foo6 or foo7",
      "snippetWithContext": "    (/n        (foo0 and foo1)/n        or (foo2 or foo3)/n        or (foo4 and foo9)/n        or (foo4 or foo9)/n        or (foo6 and foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo6 or foo7)/n        or (foo7 and foo8)/n    )",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "cognitive/count_complex_logical_operator_sequence.py",
        "range": {
          "startLine": 12,
          "startColumn": 13,
          "endLine": 12,
          "endColumn": 25,
          "startByte": 277,
          "endByte": 289
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "False and True",
      "snippetWithContext": "def foo():/n    return True or False and True and False or True",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "cognitive/count_non_sequential_logical_operators.py",
        "range": {
          "startLine": 2,
          "startColumn": 20,
          "endLine": 2,
          "endColumn": 34,
          "startByte": 30,
          "endByte": 44
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 55)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "def main():/n    foo = 42/n    if foo:/n        if foo > 10:/n            if foo < 20:/n                if foo % 2 == 0:/n                    if foo % 3 == 0:/n                        if foo % 5 == 0:/n                            if foo % 7 == 0:/n                                if foo % 11 == 0:/n                                    if foo % 13 == 0:/n                                        if foo % 17 == 0:/n                                            print(/"Nested!/")/n",
      "snippetWithContext": "def main():/n    foo = 42/n    if foo:/n        if foo > 10:/n            if foo < 20:/n                if foo % 2 == 0:/n                    if foo % 3 == 0:/n                        if foo % 5 == 0:/n                            if foo % 7 == 0:/n                                if foo % 11 == 0:/n                                    if foo % 13 == 0:/n                                        if foo % 17 == 0:/n                                            print(/"Nested!/")",
      "effortMinutes": 150,
      "value": 55,
      "valueDelta": 5,
      "location": {
        "path": "file_complexity.py",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 14,
          "endColumn": 1,
          "startByte": 0,
          "endByte": 462
        }
      },
      "partialFingerprints": {
        "file.path": "file_complexity.py"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "def main():/n    foo = 42/n    if foo:/n        if foo > 10:/n            if foo < 20:/n                if foo % 2 == 0:/n                    if foo % 3 == 0:/n                        if foo % 5 == 0:/n                            if foo % 7 == 0:/n                                if foo % 11 == 0:/n                                    if foo % 13 == 0:/n                                        if foo % 17 == 0:/n                                            print(/"Nested!/")",
      "snippetWithContext": "def main():/n    foo = 42/n    if foo:/n        if foo > 10:/n            if foo < 20:/n                if foo % 2 == 0:/n                    if foo % 3 == 0:/n                        if foo % 5 == 0:/n                            if foo % 7 == 0:/n                                if foo % 11 == 0:/n                                    if foo % 13 == 0:/n                                        if foo % 17 == 0:/n                                            print(/"Nested!/")",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "file_complexity.py",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 13,
          "endColumn": 61,
          "startByte": 0,
          "endByte": 461
        }
      },
      "partialFingerprints": {
        "function.name": "main"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-parameters",
      "message": "Function with many parameters (count = 6): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "(a, b, c, d, e, f)",
      "snippetWithContext": "def f0():/n    pass/n/n/ndef f1(dog, cat):/n    pass/n/n/ndef f2(a, b, c, d, e, f):/n    pass/n/n/ndef f3():/n    # Function calls don't count, only function definitions/n    foo = bar(1, 2, 3, 4)",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "parameters.py",
        "range": {
          "startLine": 9,
          "startColumn": 7,
          "endLine": 9,
          "endColumn": 25,
          "startByte": 56,
          "endByte": 74
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if foo % 3 == 0:/n                        if foo % 5 == 0:/n                            if foo % 7 == 0:/n                                if foo % 11 == 0:/n                                    if foo % 13 == 0:/n                                        if foo % 17 == 0:/n                                            print(/"Nested!/")",
      "snippetWithContext": "def main():/n    foo = 42/n    if foo:/n        if foo > 10:/n            if foo < 20:/n                if foo % 2 == 0:/n                    if foo % 3 == 0:/n                        if foo % 5 == 0:/n                            if foo % 7 == 0:/n                                if foo % 11 == 0:/n                                    if foo % 13 == 0:/n                                        if foo % 17 == 0:/n                                            print(/"Nested!/")",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "file_complexity.py",
        "range": {
          "startLine": 7,
          "startColumn": 21,
          "endLine": 13,
          "endColumn": 61,
          "startByte": 136,
          "endByte": 461
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if bar % 3 == 0:/n                        print(/"Nested!/")",
      "snippetWithContext": "def simple():/n    pass/n/n/ndef complex():/n    bar = 42/n    if bar:/n        if bar > 10:/n            if bar < 20:/n                if bar % 2 == 0:/n                    if bar % 3 == 0:/n                        print(/"Nested!/")",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "function_complexity.py",
        "range": {
          "startLine": 11,
          "startColumn": 21,
          "endLine": 12,
          "endColumn": 41,
          "startByte": 164,
          "endByte": 221
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 6): how_complex",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "def how_complex(foo):/n    if foo is None:  # +1 (for the if)/n        return None/n    elif 80 <= foo <= 100:  # +1 (for the elif)/n        return /"Most complex!/"/n    elif 60 <= foo <= 79:  # +1 (for the elif)/n        return /"Very complex/"/n    elif 40 <= foo <= 59:  # +1 (for the elif)/n        return /"Somewhat complex/"/n    elif 20 <= foo <= 39:  # +1 (for the elif)/n        return /"Not complex/"/n    elif 0 <= foo <= 19:  # +1 (for the elif)/n        return /"Least complex!/"",
      "snippetWithContext": "def how_complex(foo):/n    if foo is None:  # +1 (for the if)/n        return None/n    elif 80 <= foo <= 100:  # +1 (for the elif)/n        return /"Most complex!/"/n    elif 60 <= foo <= 79:  # +1 (for the elif)/n        return /"Very complex/"/n    elif 40 <= foo <= 59:  # +1 (for the elif)/n        return /"Somewhat complex/"/n    elif 20 <= foo <= 39:  # +1 (for the elif)/n        return /"Not complex/"/n    elif 0 <= foo <= 19:  # +1 (for the elif)/n        return /"Least complex!/"",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "cognitive/count_complex_function.py",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 13,
          "endColumn": 32,
          "startByte": 0,
          "endByte": 471
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 9): more_complex",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "def more_complex(foo, bar):/n    if foo is None:  # +1 (for the if)/n        return None/n    elif 80 <= foo <= 100:  # +1 (for the elif)/n        if (/n            bar == /"A/"/n        ):  # +2 (for the if nested inside an elif: +1 for the if and +1 for nesting)/n            return /"Most complex, Class A!/"/n        elif (/n            bar == /"B/"/n        ):  # +2 (for the elif nested inside an elif: +1 for the elif and +1 for nesting)/n            return /"Most complex, Class B!/"/n        else:  # +1 (for the else nested inside an elif, no increment for nesting since it's on the same level as the previous if/elif)/n            return /"Most complex, Unclassed!/"/n    elif 60 <= foo <= 79 and bar != /"C/":  # +1 (for the elif)/n        return /"Very complex/"/n    elif 40 <= foo <= 59 or bar == /"D/":  # +1 (for the elif)/n        return /"Somewhat complex/"/n    elif 20 <= foo <= 39:  # +1 (for the elif)/n        if bar.startswith(/n            /"X/"/n        ):  # +2 (for the if nested inside an elif: +1 for the if and +1 for nesting)/n            return /"Not complex, Special X/"/n        else:/n            return /"Not complex/"/n    elif 0 <= foo <= 19:  # +1 (for the elif)/n        return /"Least complex!/"/n    else:/n        raise ValueError(/n            /"Invalid input!/"/n        )  # +1 (for the else, after a series of if/elifs)",
      "snippetWithContext": "def more_complex(foo, bar):/n    if foo is None:  # +1 (for the if)/n        return None/n    elif 80 <= foo <= 100:  # +1 (for the elif)/n        if (/n            bar == /"A/"/n        ):  # +2 (for the if nested inside an elif: +1 for the if and +1 for nesting)/n            return /"Most complex, Class A!/"/n        elif (/n            bar == /"B/"/n        ):  # +2 (for the elif nested inside an elif: +1 for the elif and +1 for nesting)/n            return /"Most complex, Class B!/"/n        else:  # +1 (for the else nested inside an elif, no increment for nesting since it's on the same level as the previous if/elif)/n            return /"Most complex, Unclassed!/"/n    elif 60 <= foo <= 79 and bar != /"C/":  # +1 (for the elif)/n        return /"Very complex/"/n    elif 40 <= foo <= 59 or bar == /"D/":  # +1 (for the elif)/n        return /"Somewhat complex/"/n    elif 20 <= foo <= 39:  # +1 (for the elif)/n        if bar.startswith(/n            /"X/"/n        ):  # +2 (for the if nested inside an elif: +1 for the if and +1 for nesting)/n            return /"Not complex, Special X/"/n        else:/n            return /"Not complex/"/n    elif 0 <= foo <= 19:  # +1 (for the elif)/n        return /"Least complex!/"/n    else:/n        raise ValueError(/n            /"Invalid input!/"/n        )  # +1 (for the else, after a series of if/elifs)",
      "effortMinutes": 30,
      "value": 9,
      "valueDelta": 3,
      "location": {
        "path": "cognitive/count_more_complex_function_with_nested_logic.py",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 31,
          "endColumn": 59,
          "startByte": 0,
          "endByte": 1310
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 10): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_PYTHON",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "def f2(foo):/n    if foo == 1:/n        return /"bar1/"/n    elif foo == 2:/n        return /"bar2/"/n    elif foo == 3:/n        return /"bar3/"/n    elif foo == 4:/n        return /"bar4/"/n    elif foo == 5:/n        return /"bar5/"/n    elif foo == 6:/n        return /"bar6/"/n    elif foo == 7:/n        return /"bar7/"/n    elif foo == 8:/n        return /"bar8/"/n    elif foo == 9:/n        return /"bar9/"/n    elif foo == 10:/n        return /"bar10/"/n    else:/n        raise ValueError(/"Invalid foo value/")",
      "snippetWithContext": "/n/ndef f1():/n    if bar:/n        if baz:/n            if qux:/n                if quux:/n                    print(/"Deeply nested!/")/n/n/ndef f2(foo):/n    if foo == 1:/n        return /"bar1/"/n    elif foo == 2:/n        return /"bar2/"/n    elif foo == 3:/n        return /"bar3/"/n    elif foo == 4:/n        return /"bar4/"/n    elif foo == 5:/n        return /"bar5/"/n    elif foo == 6:/n        return /"bar6/"/n    elif foo == 7:/n        return /"bar7/"/n    elif foo == 8:/n        return /"bar8/"/n    elif foo == 9:/n        return /"bar9/"/n    elif foo == 10:/n        return /"bar10/"/n    else:/n        raise ValueError(/"Invalid foo value/")",
      "effortMinutes": 35,
      "value": 10,
      "valueDelta": 4,
      "location": {
        "path": "nested_control.py",
        "range": {
          "startLine": 24,
          "startColumn": 1,
          "endLine": 46,
          "endColumn": 46,
          "startByte": 449,
          "endByte": 927
        }
      },
      "mode": "MODE_BLOCK"
    }
  ],
  "stats": [
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "boolean_logic.py",
      "fullyQualifiedName": "boolean_logic.py",
      "path": "boolean_logic.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 7,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 2,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_boolean.py",
      "fullyQualifiedName": "cognitive/count_boolean.py",
      "path": "cognitive/count_boolean.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 4,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_catch_rescue_statements.py",
      "fullyQualifiedName": "cognitive/count_catch_rescue_statements.py",
      "path": "cognitive/count_catch_rescue_statements.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_complex_function.py",
      "fullyQualifiedName": "cognitive/count_complex_function.py",
      "path": "cognitive/count_complex_function.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 13,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 6,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_complex_logical_operator_sequence.py",
      "fullyQualifiedName": "cognitive/count_complex_logical_operator_sequence.py",
      "path": "cognitive/count_complex_logical_operator_sequence.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 15,
      "codeLines": 15,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 7,
      "cyclomatic": 24,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_conditional_assignment.py",
      "fullyQualifiedName": "cognitive/count_conditional_assignment.py",
      "path": "cognitive/count_conditional_assignment.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 6,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_decorator.py",
      "fullyQualifiedName": "cognitive/count_decorator.py",
      "path": "cognitive/count_decorator.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_decorator_generator.py",
      "fullyQualifiedName": "cognitive/count_decorator_generator.py",
      "path": "cognitive/count_decorator_generator.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 3,
      "fields": 0,
      "lines": 10,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_function_with_ternary.py",
      "fullyQualifiedName": "cognitive/count_function_with_ternary.py",
      "path": "cognitive/count_function_with_ternary.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 3,
      "codeLines": 3,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_if.py",
      "fullyQualifiedName": "cognitive/count_if.py",
      "path": "cognitive/count_if.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_if_elif_else.py",
      "fullyQualifiedName": "cognitive/count_if_elif_else.py",
      "path": "cognitive/count_if_elif_else.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 6,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_if_else.py",
      "fullyQualifiedName": "cognitive/count_if_else.py",
      "path": "cognitive/count_if_else.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 4,
      "codeLines": 4,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_if_elsif.py",
      "fullyQualifiedName": "cognitive/count_if_elsif.py",
      "path": "cognitive/count_if_elsif.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 4,
      "codeLines": 4,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_jumps.py",
      "fullyQualifiedName": "cognitive/count_jumps.py",
      "path": "cognitive/count_jumps.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 3,
      "codeLines": 3,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_lambdas.py",
      "fullyQualifiedName": "cognitive/count_lambdas.py",
      "path": "cognitive/count_lambdas.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 6,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 2,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_more_complex_function_with_nested_logic.py",
      "fullyQualifiedName": "cognitive/count_more_complex_function_with_nested_logic.py",
      "path": "cognitive/count_more_complex_function_with_nested_logic.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 31,
      "codeLines": 31,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 16,
      "cyclomatic": 12,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_multiple_if_statements.py",
      "fullyQualifiedName": "cognitive/count_multiple_if_statements.py",
      "path": "cognitive/count_multiple_if_statements.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nested_if_else.py",
      "fullyQualifiedName": "cognitive/count_nested_if_else.py",
      "path": "cognitive/count_nested_if_else.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 13,
      "codeLines": 12,
      "commentLines": 1,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nesting_elif.py",
      "fullyQualifiedName": "cognitive/count_nesting_elif.py",
      "path": "cognitive/count_nesting_elif.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 4,
      "cyclomatic": 4,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nesting_else.py",
      "fullyQualifiedName": "cognitive/count_nesting_else.py",
      "path": "cognitive/count_nesting_else.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 4,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nesting_except.py",
      "fullyQualifiedName": "cognitive/count_nesting_except.py",
      "path": "cognitive/count_nesting_except.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nesting_if.py",
      "fullyQualifiedName": "cognitive/count_nesting_if.py",
      "path": "cognitive/count_nesting_if.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 3,
      "codeLines": 3,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_nesting_loops.py",
      "fullyQualifiedName": "cognitive/count_nesting_loops.py",
      "path": "cognitive/count_nesting_loops.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 6,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_no_logic.py",
      "fullyQualifiedName": "cognitive/count_no_logic.py",
      "path": "cognitive/count_no_logic.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 1,
      "codeLines": 1,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_non_sequential_logical_operators.py",
      "fullyQualifiedName": "cognitive/count_non_sequential_logical_operators.py",
      "path": "cognitive/count_non_sequential_logical_operators.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_not_decorator.py",
      "fullyQualifiedName": "cognitive/count_not_decorator.py",
      "path": "cognitive/count_not_decorator.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 2,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_recursion.py",
      "fullyQualifiedName": "cognitive/count_recursion.py",
      "path": "cognitive/count_recursion.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_ternary.py",
      "fullyQualifiedName": "cognitive/count_ternary.py",
      "path": "cognitive/count_ternary.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 1,
      "codeLines": 1,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_binary.py",
      "fullyQualifiedName": "cyclomatic/count_binary.py",
      "path": "cyclomatic/count_binary.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_if.py",
      "fullyQualifiedName": "cyclomatic/count_if.py",
      "path": "cyclomatic/count_if.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_loop.py",
      "fullyQualifiedName": "cyclomatic/count_loop.py",
      "path": "cyclomatic/count_loop.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "count_no_logic.py",
      "fullyQualifiedName": "cyclomatic/count_no_logic.py",
      "path": "cyclomatic/count_no_logic.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_if_elif.py",
      "fullyQualifiedName": "cyclomatic/cyclo_if_elif.py",
      "path": "cyclomatic/cyclo_if_elif.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_if_elif_else.py",
      "fullyQualifiedName": "cyclomatic/cyclo_if_elif_else.py",
      "path": "cyclomatic/cyclo_if_elif_else.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 3,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclo_if_else.py",
      "fullyQualifiedName": "cyclomatic/cyclo_if_else.py",
      "path": "cyclomatic/cyclo_if_else.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "iterative_for_in.py",
      "fullyQualifiedName": "cyclomatic/iterative_for_in.py",
      "path": "cyclomatic/iterative_for_in.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 3,
      "codeLines": 3,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "iterative_map.py",
      "fullyQualifiedName": "cyclomatic/iterative_map.py",
      "path": "cyclomatic/iterative_map.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 3,
      "codeLines": 3,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "iterative_methods_with_filter.py",
      "fullyQualifiedName": "cyclomatic/iterative_methods_with_filter.py",
      "path": "cyclomatic/iterative_methods_with_filter.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 2,
      "cyclomatic": 4,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "class_declaration.py",
      "fullyQualifiedName": "fields/class_declaration.py",
      "path": "fields/class_declaration.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 2,
      "lines": 23,
      "codeLines": 19,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "ignore_collaborators.py",
      "fullyQualifiedName": "fields/ignore_collaborators.py",
      "path": "fields/ignore_collaborators.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 0,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "multiple.py",
      "fullyQualifiedName": "fields/multiple.py",
      "path": "fields/multiple.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 2,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "read.py",
      "fullyQualifiedName": "fields/read.py",
      "path": "fields/read.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 1,
      "lines": 1,
      "codeLines": 1,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "unique.py",
      "fullyQualifiedName": "fields/unique.py",
      "path": "fields/unique.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 1,
      "lines": 2,
      "codeLines": 2,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "write.py",
      "fullyQualifiedName": "fields/write.py",
      "path": "fields/write.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 0,
      "fields": 1,
      "lines": 1,
      "codeLines": 1,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "file_complexity.py",
      "fullyQualifiedName": "file_complexity.py",
      "path": "file_complexity.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 13,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 55,
      "cyclomatic": 11,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "function_complexity.py",
      "fullyQualifiedName": "function_complexity.py",
      "path": "function_complexity.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 12,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 15,
      "cyclomatic": 6,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "methods_with_parameters.py",
      "fullyQualifiedName": "functions/methods_with_parameters.py",
      "path": "functions/methods_with_parameters.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 2,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "methods_without_parameters.py",
      "fullyQualifiedName": "functions/methods_without_parameters.py",
      "path": "functions/methods_without_parameters.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 1,
      "functions": 4,
      "fields": 2,
      "lines": 13,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "singleton_methods_with_parameters.py",
      "fullyQualifiedName": "functions/singleton_methods_with_parameters.py",
      "path": "functions/singleton_methods_with_parameters.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 4,
      "codeLines": 4,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "singleton_methods_without_parameters.py",
      "fullyQualifiedName": "functions/singleton_methods_without_parameters.py",
      "path": "functions/singleton_methods_without_parameters.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 4,
      "codeLines": 4,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "identical.py",
      "fullyQualifiedName": "identical.py",
      "path": "identical.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 23,
      "codeLines": 18,
      "commentLines": 0,
      "blankLines": 5,
      "complexity": 4,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_0.py",
      "fullyQualifiedName": "lcom/lcom_0.py",
      "path": "lcom/lcom_0.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 2,
      "functions": 3,
      "fields": 0,
      "lines": 15,
      "codeLines": 8,
      "commentLines": 1,
      "blankLines": 6,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1-1.py",
      "fullyQualifiedName": "lcom/lcom_1-1.py",
      "path": "lcom/lcom_1-1.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 6,
      "codeLines": 3,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1.py",
      "fullyQualifiedName": "lcom/lcom_1.py",
      "path": "lcom/lcom_1.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 6,
      "codeLines": 3,
      "commentLines": 1,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_2.py",
      "fullyQualifiedName": "lcom/lcom_2.py",
      "path": "lcom/lcom_2.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 2,
      "functions": 4,
      "fields": 3,
      "lines": 16,
      "codeLines": 10,
      "commentLines": 1,
      "blankLines": 5,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 2
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lines.py",
      "fullyQualifiedName": "lines.py",
      "path": "lines.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 3,
      "fields": 0,
      "lines": 25,
      "codeLines": 16,
      "commentLines": 2,
      "blankLines": 7,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "nested_control.py",
      "fullyQualifiedName": "nested_control.py",
      "path": "nested_control.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 4,
      "fields": 0,
      "lines": 46,
      "codeLines": 40,
      "commentLines": 0,
      "blankLines": 6,
      "complexity": 36,
      "cyclomatic": 23,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "parameters.py",
      "fullyQualifiedName": "parameters.py",
      "path": "parameters.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 4,
      "fields": 0,
      "lines": 15,
      "codeLines": 8,
      "commentLines": 1,
      "blankLines": 6,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "returns.py",
      "fullyQualifiedName": "returns.py",
      "path": "returns.py",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_PYTHON",
      "files": 1,
      "classes": 0,
      "functions": 5,
      "fields": 0,
      "lines": 25,
      "codeLines": 17,
      "commentLines": 0,
      "blankLines": 8,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cognitive",
      "fullyQualifiedName": "cognitive",
      "path": "cognitive",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 27,
      "classes": 0,
      "functions": 17,
      "fields": 0,
      "lines": 177,
      "codeLines": 168,
      "commentLines": 1,
      "blankLines": 8,
      "complexity": 78,
      "cyclomatic": 103,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclomatic",
      "fullyQualifiedName": "cyclomatic",
      "path": "cyclomatic",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 10,
      "classes": 0,
      "functions": 7,
      "fields": 0,
      "lines": 40,
      "codeLines": 38,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 14,
      "cyclomatic": 24,
      "lcom4": 0
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "fields",
      "fullyQualifiedName": "fields",
      "path": "fields",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 6,
      "classes": 1,
      "functions": 2,
      "fields": 7,
      "lines": 31,
      "codeLines": 27,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 6,
      "lcom4": 1
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "functions",
      "fullyQualifiedName": "functions",
      "path": "functions",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 4,
      "functions": 8,
      "fields": 4,
      "lines": 28,
      "codeLines": 24,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 4,
      "lcom4": 2
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom",
      "fullyQualifiedName": "lcom",
      "path": "lcom",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 6,
      "functions": 9,
      "fields": 4,
      "lines": 43,
      "codeLines": 24,
      "commentLines": 4,
      "blankLines": 15,
      "complexity": 0,
      "cyclomatic": 4,
      "lcom4": 4
    }
  ]
}
