{
  "metadata": {
    "buildId": "[..]",
    "result": "ANALYSIS_RESULT_SUCCESS",
    "filesAnalyzed": 43,
    "startTime": "[..]",
    "finishTime": "[..]",
    "commitMessage": "initial/n",
    "committedAt": "2024-01-01T00:00:00+00:00",
    "committerEmail": "test@codeclimate.com",
    "committerName": "TEST",
    "authorEmail": "test@codeclimate.com",
    "authorName": "TEST",
    "authoredAt": "2024-01-01T00:00:00+00:00"
  },
  "messages": [],
  "invocations": [],
  "issues": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 20 lines of similar code in 2 locations (mass = 106)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "static double[] f0(double[] numbers) {/n        double sum = 0;/n        for (double num : numbers) {/n            sum += num;/n        }/n        double mean = sum / numbers.length;/n/n        double[] sortedNumbers = numbers.clone();/n        Arrays.sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.length;/n        if (length % 2 == 0) {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        } else {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }",
      "snippetWithContext": "import java.util.Arrays;/n/nclass Identical {/n    static double[] f0(double[] numbers) {/n        double sum = 0;/n        for (double num : numbers) {/n            sum += num;/n        }/n        double mean = sum / numbers.length;/n/n        double[] sortedNumbers = numbers.clone();/n        Arrays.sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.length;/n        if (length % 2 == 0) {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        } else {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }/n/n    static double[] f1(double[] numbers) {/n        double sum = 0;/n        for (double num : numbers) {/n            sum += num;/n        }/n        double mean = sum / numbers.length;/n/n        double[] sortedNumbers = numbers.clone();/n        Arrays.sort(sortedNumbers);/n",
      "effortMinutes": 35,
      "value": 20,
      "valueDelta": 5,
      "location": {
        "path": "Identical.java",
        "range": {
          "startLine": 4,
          "endLine": 23,
          "startByte": 48,
          "endByte": 626
        }
      },
      "otherLocations": [
        {
          "path": "Identical.java",
        [..]
        [..]
        [..]
        [..]
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "duplication",
      "ruleKey": "similar-code",
      "message": "Found 20 lines of similar code in 2 locations (mass = 106)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_DUPLICATION",
      "snippet": "static double[] f1(double[] numbers) {/n        double sum = 0;/n        for (double num : numbers) {/n            sum += num;/n        }/n        double mean = sum / numbers.length;/n/n        double[] sortedNumbers = numbers.clone();/n        Arrays.sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.length;/n        if (length % 2 == 0) {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        } else {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }",
      "snippetWithContext": "        if (length % 2 == 0) {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        } else {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }/n/n    static double[] f1(double[] numbers) {/n        double sum = 0;/n        for (double num : numbers) {/n            sum += num;/n        }/n        double mean = sum / numbers.length;/n/n        double[] sortedNumbers = numbers.clone();/n        Arrays.sort(sortedNumbers);/n/n        double median;/n        int length = sortedNumbers.length;/n        if (length % 2 == 0) {/n            median = (sortedNumbers[length / 2 - 1] + sortedNumbers[length / 2]) / 2.0;/n        } else {/n            median = sortedNumbers[length / 2];/n        }/n/n        return new double[] { mean, median };/n    }/n}",
      "effortMinutes": 35,
      "value": 20,
      "valueDelta": 5,
      "location": {
        "path": "Identical.java",
        "range": {
          "startLine": 25,
          "endLine": 44,
          "startByte": 632,
          "endByte": 1210
        }
      },
      "otherLocations": [
        {
          "path": "Identical.java",
        [..]
        [..]
        [..]
        [..]
        }
      ],
      "properties": {
        [..]
        [..]
        [..]
        [..]
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "false && true",
      "snippetWithContext": "package cognitive;/n/nclass CountNonSequentialLogicalOperators {/n  public static boolean main(String[] args) {/n    return true || false && true && false || true;/n  }/n}",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "cognitive/CountNonSequentialLogicalOperators.java",
        "range": {
          "startLine": 5,
          "startColumn": 20,
          "endLine": 5,
          "endColumn": 33,
          "startByte": 128,
          "endByte": 141
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 55)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "class FileComplexity {/n    public static void main(String[] args) {/n        int foo = 42;/n        if (foo > 0) {/n            if (foo > 10) {/n                if (foo < 20) {/n                    if (foo % 2 == 0) {/n                        if (foo % 3 == 0) {/n                            if (foo % 5 == 0) {/n                                if (foo % 7 == 0) {/n                                    if (foo % 11 == 0) {/n                                        if (foo % 13 == 0) {/n                                            if (foo % 17 == 0) {/n                                                System.out.println(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}/n",
      "snippetWithContext": "class FileComplexity {/n    public static void main(String[] args) {/n        int foo = 42;/n        if (foo > 0) {/n            if (foo > 10) {/n                if (foo < 20) {/n                    if (foo % 2 == 0) {/n                        if (foo % 3 == 0) {/n                            if (foo % 5 == 0) {/n                                if (foo % 7 == 0) {/n                                    if (foo % 11 == 0) {/n                                        if (foo % 13 == 0) {/n                                            if (foo % 17 == 0) {/n                                                System.out.println(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 150,
      "value": 55,
      "valueDelta": 5,
      "location": {
        "path": "FileComplexity.java",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 27,
          "endColumn": 1,
          "startByte": 0,
          "endByte": 907
        }
      },
      "partialFingerprints": {
        "file.path": "FileComplexity.java"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "public static void main(String[] args) {/n        int foo = 42;/n        if (foo > 0) {/n            if (foo > 10) {/n                if (foo < 20) {/n                    if (foo % 2 == 0) {/n                        if (foo % 3 == 0) {/n                            if (foo % 5 == 0) {/n                                if (foo % 7 == 0) {/n                                    if (foo % 11 == 0) {/n                                        if (foo % 13 == 0) {/n                                            if (foo % 17 == 0) {/n                                                System.out.println(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }",
      "snippetWithContext": "class FileComplexity {/n    public static void main(String[] args) {/n        int foo = 42;/n        if (foo > 0) {/n            if (foo > 10) {/n                if (foo < 20) {/n                    if (foo % 2 == 0) {/n                        if (foo % 3 == 0) {/n                            if (foo % 5 == 0) {/n                                if (foo % 7 == 0) {/n                                    if (foo % 11 == 0) {/n                                        if (foo % 13 == 0) {/n                                            if (foo % 17 == 0) {/n                                                System.out.println(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "FileComplexity.java",
        "range": {
          "startLine": 2,
          "startColumn": 5,
          "endLine": 25,
          "endColumn": 6,
          "startByte": 27,
          "endByte": 904
        }
      },
      "partialFingerprints": {
        "function.name": "main"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-parameters",
      "message": "Function with many parameters (count = 6): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "(Object a, Object b, Object c, Object d, Object e, Object f)",
      "snippetWithContext": "class Parameters {/n    public static void f0() {/n    }/n/n    public static void f1(Object dog, Object cat) {/n    }/n/n    public static void f2(Object a, Object b, Object c, Object d, Object e, Object f) {/n    }/n/n    public static void f3() {/n        Object foo = bar(1, 2, 3, 4);/n    }/n/n    public static Object bar(int a, int b, int c, int d) {/n        return new Object();/n    }/n}",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "Parameters.java",
        "range": {
          "startLine": 8,
          "startColumn": 26,
          "endLine": 8,
          "endColumn": 86,
          "startByte": 140,
          "endByte": 200
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if (foo % 3 == 0) {/n                            if (foo % 5 == 0) {/n                                if (foo % 7 == 0) {/n                                    if (foo % 11 == 0) {/n                                        if (foo % 13 == 0) {/n                                            if (foo % 17 == 0) {/n                                                System.out.println(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }",
      "snippetWithContext": "class FileComplexity {/n    public static void main(String[] args) {/n        int foo = 42;/n        if (foo > 0) {/n            if (foo > 10) {/n                if (foo < 20) {/n                    if (foo % 2 == 0) {/n                        if (foo % 3 == 0) {/n                            if (foo % 5 == 0) {/n                                if (foo % 7 == 0) {/n                                    if (foo % 11 == 0) {/n                                        if (foo % 13 == 0) {/n                                            if (foo % 17 == 0) {/n                                                System.out.println(/"Nested!/");/n                                            }/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "FileComplexity.java",
        "range": {
          "startLine": 8,
          "startColumn": 25,
          "endLine": 20,
          "endColumn": 26,
          "startByte": 237,
          "endByte": 834
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if (bar % 3 == 0) {/n                            System.out.println(/"Nested!/");/n                        }",
      "snippetWithContext": "class FunctionComplexity {/n    void simple() {/n    }/n/n    void complex() {/n        int bar = 42;/n        if (bar > 0) {/n            if (bar > 10) {/n                if (bar < 20) {/n                    if (bar % 2 == 0) {/n                        if (bar % 3 == 0) {/n                            System.out.println(/"Nested!/");/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "FunctionComplexity.java",
        "range": {
          "startLine": 11,
          "startColumn": 25,
          "endLine": 13,
          "endColumn": 26,
          "startByte": 244,
          "endByte": 348
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 10): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "public static String f2(int foo) {/n        switch (foo) {/n            case 1:/n                return /"bar1/";/n            case 2:/n                return /"bar2/";/n            case 3:/n                return /"bar3/";/n            case 4:/n                return /"bar4/";/n            case 5:/n                return /"bar5/";/n            case 6:/n                return /"bar6/";/n            case 7:/n                return /"bar7/";/n            case 8:/n                return /"bar8/";/n            case 9:/n                return /"bar9/";/n            case 10:/n                return /"bar10/";/n            default:/n                throw new IllegalArgumentException(/"Invalid foo value/");/n        }/n    }",
      "snippetWithContext": "            if (baz) {/n                if (qux) {/n                    if (quux) {/n                        System.out.println(/"Deeply nested!/");/n                    }/n                }/n            }/n        }/n    }/n/n    public static String f2(int foo) {/n        switch (foo) {/n            case 1:/n                return /"bar1/";/n            case 2:/n                return /"bar2/";/n            case 3:/n                return /"bar3/";/n            case 4:/n                return /"bar4/";/n            case 5:/n                return /"bar5/";/n            case 6:/n                return /"bar6/";/n            case 7:/n                return /"bar7/";/n            case 8:/n                return /"bar8/";/n            case 9:/n                return /"bar9/";/n            case 10:/n                return /"bar10/";/n            default:/n                throw new IllegalArgumentException(/"Invalid foo value/");/n        }/n    }/n}",
      "effortMinutes": 35,
      "value": 10,
      "valueDelta": 4,
      "location": {
        "path": "NestedControl.java",
        "range": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 6,
          "startByte": 954,
          "endByte": 1633
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "return-statements",
      "message": "Function with many returns (count = 6): main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_JAVA",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "public static String main(int foo) {/n    if (foo >= 80 && foo <= 100) {/n      return /"Most complex!/";/n    } else if (foo >= 60 && foo <= 79) {/n      return /"Very complex/";/n    } else if (foo >= 40 && foo <= 59) {/n      return /"Somewhat complex/";/n    } else if (foo >= 20 && foo <= 39) {/n      return /"Not complex/";/n    } else if (foo >= 0 && foo <= 19) {/n      return /"Least complex!/";/n    } else {/n      return null;/n    }/n  }",
      "snippetWithContext": "package cognitive;/n/nclass MultipleConditionals {/n  public static String main(int foo) {/n    if (foo >= 80 && foo <= 100) {/n      return /"Most complex!/";/n    } else if (foo >= 60 && foo <= 79) {/n      return /"Very complex/";/n    } else if (foo >= 40 && foo <= 59) {/n      return /"Somewhat complex/";/n    } else if (foo >= 20 && foo <= 39) {/n      return /"Not complex/";/n    } else if (foo >= 0 && foo <= 19) {/n      return /"Least complex!/";/n    } else {/n      return null;/n    }/n  }/n}",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "cognitive/MultipleConditionals.java",
        "range": {
          "startLine": 4,
          "startColumn": 3,
          "endLine": 18,
          "endColumn": 4,
          "startByte": 51,
          "endByte": 478
        }
      },
      "mode": "MODE_BLOCK"
    }
  ],
  "stats": [
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "BooleanLogic.java",
      "fullyQualifiedName": "BooleanLogic.java",
      "path": "BooleanLogic.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 2,
      "functions": 2,
      "fields": 6,
      "lines": 21,
      "codeLines": 18,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 2,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "FileComplexity.java",
      "fullyQualifiedName": "FileComplexity.java",
      "path": "FileComplexity.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 26,
      "codeLines": 26,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 55,
      "cyclomatic": 28,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "FunctionComplexity.java",
      "fullyQualifiedName": "FunctionComplexity.java",
      "path": "FunctionComplexity.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 0,
      "lines": 19,
      "codeLines": 18,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 15,
      "cyclomatic": 13,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Identical.java",
      "fullyQualifiedName": "Identical.java",
      "path": "Identical.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 0,
      "lines": 45,
      "codeLines": 35,
      "commentLines": 0,
      "blankLines": 10,
      "complexity": 6,
      "cyclomatic": 23,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Lines.java",
      "fullyQualifiedName": "Lines.java",
      "path": "Lines.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 5,
      "fields": 0,
      "lines": 44,
      "codeLines": 27,
      "commentLines": 7,
      "blankLines": 10,
      "complexity": 1,
      "cyclomatic": 4,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "NestedControl.java",
      "fullyQualifiedName": "NestedControl.java",
      "path": "NestedControl.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 4,
      "fields": 0,
      "lines": 60,
      "codeLines": 56,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 26,
      "cyclomatic": 24,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Parameters.java",
      "fullyQualifiedName": "Parameters.java",
      "path": "Parameters.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 5,
      "fields": 0,
      "lines": 18,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Returns.java",
      "fullyQualifiedName": "Returns.java",
      "path": "Returns.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 5,
      "fields": 0,
      "lines": 38,
      "codeLines": 31,
      "commentLines": 0,
      "blankLines": 7,
      "complexity": 9,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountConditionalAssignment.java",
      "fullyQualifiedName": "cognitive/CountConditionalAssignment.java",
      "path": "cognitive/CountConditionalAssignment.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 10,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 3,
      "cyclomatic": 7,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountFunctionWithTernary.java",
      "fullyQualifiedName": "cognitive/CountFunctionWithTernary.java",
      "path": "cognitive/CountFunctionWithTernary.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 4,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountNonSequentialLogicalOperators.java",
      "fullyQualifiedName": "cognitive/CountNonSequentialLogicalOperators.java",
      "path": "cognitive/CountNonSequentialLogicalOperators.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 3,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CountRecursion.java",
      "fullyQualifiedName": "cognitive/CountRecursion.java",
      "path": "cognitive/CountRecursion.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MultipleConditionals.java",
      "fullyQualifiedName": "cognitive/MultipleConditionals.java",
      "path": "cognitive/MultipleConditionals.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 19,
      "codeLines": 17,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 7,
      "cyclomatic": 21,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloBasic.java",
      "fullyQualifiedName": "cyclomatic/CycloBasic.java",
      "path": "cyclomatic/CycloBasic.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIf.java",
      "fullyQualifiedName": "cyclomatic/CycloIf.java",
      "path": "cyclomatic/CycloIf.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 8,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElse.java",
      "fullyQualifiedName": "cyclomatic/CycloIfElse.java",
      "path": "cyclomatic/CycloIfElse.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 10,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElseIf.java",
      "fullyQualifiedName": "cyclomatic/CycloIfElseIf.java",
      "path": "cyclomatic/CycloIfElseIf.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 10,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "CycloIfElseIfElse.java",
      "fullyQualifiedName": "cyclomatic/CycloIfElseIfElse.java",
      "path": "cyclomatic/CycloIfElseIfElse.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 12,
      "codeLines": 11,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 3,
      "cyclomatic": 5,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "EmptyFunction.java",
      "fullyQualifiedName": "cyclomatic/EmptyFunction.java",
      "path": "cyclomatic/EmptyFunction.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 4,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "EmptyIf.java",
      "fullyQualifiedName": "cyclomatic/EmptyIf.java",
      "path": "cyclomatic/EmptyIf.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 6,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IfWithBool.java",
      "fullyQualifiedName": "cyclomatic/IfWithBool.java",
      "path": "cyclomatic/IfWithBool.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 6,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 2,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeForOf.java",
      "fullyQualifiedName": "cyclomatic/IterativeForOf.java",
      "path": "cyclomatic/IterativeForOf.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 7,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeMap.java",
      "fullyQualifiedName": "cyclomatic/IterativeMap.java",
      "path": "cyclomatic/IterativeMap.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 12,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "IterativeMethodsWithFilterAndInclude.java",
      "fullyQualifiedName": "cyclomatic/IterativeMethodsWithFilterAndInclude.java",
      "path": "cyclomatic/IterativeMethodsWithFilterAndInclude.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 15,
      "codeLines": 12,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 1,
      "cyclomatic": 3,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "WhileLoop.java",
      "fullyQualifiedName": "cyclomatic/WhileLoop.java",
      "path": "cyclomatic/WhileLoop.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 0,
      "lines": 11,
      "codeLines": 9,
      "commentLines": 1,
      "blankLines": 1,
      "complexity": 1,
      "cyclomatic": 2,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "ClassDeclaration.java",
      "fullyQualifiedName": "fields/ClassDeclaration.java",
      "path": "fields/ClassDeclaration.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 2,
      "functions": 3,
      "fields": 2,
      "lines": 25,
      "codeLines": 20,
      "commentLines": 1,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "GetterSetterDeclaration.java",
      "fullyQualifiedName": "fields/GetterSetterDeclaration.java",
      "path": "fields/GetterSetterDeclaration.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 1,
      "lines": 19,
      "codeLines": 15,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Multiple.java",
      "fullyQualifiedName": "fields/Multiple.java",
      "path": "fields/Multiple.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 11,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Other.java",
      "fullyQualifiedName": "fields/Other.java",
      "path": "fields/Other.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 12,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "PrivateFieldDeclaration.java",
      "fullyQualifiedName": "fields/PrivateFieldDeclaration.java",
      "path": "fields/PrivateFieldDeclaration.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 1,
      "lines": 13,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "PublicFieldDeclaration.java",
      "fullyQualifiedName": "fields/PublicFieldDeclaration.java",
      "path": "fields/PublicFieldDeclaration.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 9,
      "codeLines": 6,
      "commentLines": 0,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Read.java",
      "fullyQualifiedName": "fields/Read.java",
      "path": "fields/Read.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "StaticFieldDeclaration.java",
      "fullyQualifiedName": "fields/StaticFieldDeclaration.java",
      "path": "fields/StaticFieldDeclaration.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 9,
      "codeLines": 7,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Unique.java",
      "fullyQualifiedName": "fields/Unique.java",
      "path": "fields/Unique.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 1,
      "lines": 10,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "Write.java",
      "fullyQualifiedName": "fields/Write.java",
      "path": "fields/Write.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 11,
      "codeLines": 9,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MethodsWithOutParams.java",
      "fullyQualifiedName": "functions/MethodsWithOutParams.java",
      "path": "functions/MethodsWithOutParams.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 4,
      "fields": 2,
      "lines": 17,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "MethodsWithParams.java",
      "fullyQualifiedName": "functions/MethodsWithParams.java",
      "path": "functions/MethodsWithParams.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 2,
      "fields": 2,
      "lines": 15,
      "codeLines": 13,
      "commentLines": 0,
      "blankLines": 2,
      "complexity": 0,
      "cyclomatic": 2,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SingleTonMethodWithoutParams.java",
      "fullyQualifiedName": "functions/SingleTonMethodWithoutParams.java",
      "path": "functions/SingleTonMethodWithoutParams.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 5,
      "codeLines": 5,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "SingletonMethodsWithParams.java",
      "fullyQualifiedName": "functions/SingletonMethodsWithParams.java",
      "path": "functions/SingletonMethodsWithParams.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 0,
      "lines": 11,
      "codeLines": 10,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_0.java",
      "fullyQualifiedName": "lcom/lcom_0.java",
      "path": "lcom/lcom_0.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 4,
      "functions": 6,
      "fields": 3,
      "lines": 38,
      "codeLines": 28,
      "commentLines": 1,
      "blankLines": 9,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1-1.java",
      "fullyQualifiedName": "lcom/lcom_1-1.java",
      "path": "lcom/lcom_1-1.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 0,
      "lines": 14,
      "codeLines": 10,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_1.java",
      "fullyQualifiedName": "lcom/lcom_1.java",
      "path": "lcom/lcom_1.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 1,
      "functions": 3,
      "fields": 1,
      "lines": 16,
      "codeLines": 11,
      "commentLines": 1,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom_2.java",
      "fullyQualifiedName": "lcom/lcom_2.java",
      "path": "lcom/lcom_2.java",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_JAVA",
      "files": 1,
      "classes": 2,
      "functions": 7,
      "fields": 3,
      "lines": 38,
      "codeLines": 28,
      "commentLines": 1,
      "blankLines": 9,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 2
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cognitive",
      "fullyQualifiedName": "cognitive",
      "path": "cognitive",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 5,
      "classes": 5,
      "functions": 5,
      "fields": 0,
      "lines": 50,
      "codeLines": 44,
      "commentLines": 0,
      "blankLines": 6,
      "complexity": 15,
      "cyclomatic": 38,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclomatic",
      "fullyQualifiedName": "cyclomatic",
      "path": "cyclomatic",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 12,
      "classes": 12,
      "functions": 13,
      "fields": 0,
      "lines": 107,
      "codeLines": 97,
      "commentLines": 1,
      "blankLines": 9,
      "complexity": 14,
      "cyclomatic": 31,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "fields",
      "fullyQualifiedName": "fields",
      "path": "fields",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 10,
      "classes": 11,
      "functions": 15,
      "fields": 14,
      "lines": 128,
      "codeLines": 100,
      "commentLines": 1,
      "blankLines": 27,
      "complexity": 0,
      "cyclomatic": 11,
      "lcom4": 1
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "functions",
      "fullyQualifiedName": "functions",
      "path": "functions",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 4,
      "functions": 8,
      "fields": 4,
      "lines": 48,
      "codeLines": 41,
      "commentLines": 0,
      "blankLines": 7,
      "complexity": 0,
      "cyclomatic": 6,
      "lcom4": 0
    },
    {
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lcom",
      "fullyQualifiedName": "lcom",
      "path": "lcom",
      "kind": "COMPONENT_TYPE_DIRECTORY",
      "files": 4,
      "classes": 8,
      "functions": 19,
      "fields": 7,
      "lines": 106,
      "codeLines": 77,
      "commentLines": 4,
      "blankLines": 25,
      "complexity": 0,
      "cyclomatic": 4,
      "lcom4": 4
    }
  ]
}
