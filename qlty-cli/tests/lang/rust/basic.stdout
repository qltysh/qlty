{
  "metadata": {
    "id": "[..]",
    "buildId": "[..]",
    "result": "ANALYSIS_RESULT_SUCCESS",
    "filesAnalyzed": 11,
    "startTime": "[..]",
    "finishTime": "[..]",
    "commitMessage": "initial/n",
    "committedAt": "2024-01-01T00:00:00+00:00",
    "committerEmail": "test@codeclimate.com",
    "committerName": "TEST",
    "authorEmail": "test@codeclimate.com",
    "authorName": "TEST",
    "authoredAt": "2024-01-01T00:00:00+00:00",
    "generatedAt": "[..]",
    "time": "[..]"
  },
  "messages": [],
  "invocations": [],
  "issues": [
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "generatedAt": "[..]",
      "time": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "boolean-logic",
      "message": "Complex binary expression",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_RUST",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "false && true",
      "snippetWithContext": "            // +1 (for the &&)/n            Some(/"Least complex!/")/n        }/n        None => None,/n        _ => None,/n    }/n}/n/n// count_non_sequential_logical_operators_rust/nfn f2() -> bool {/n    true || false && true && false || true/n}/n/n// // fixing the `visit_binary` node traversal broke this test/n// // it now treats each `&&` as sequential, even though they're not/n// // since they're broken up by different `match_arm` nodes/n// // we previously just counted _every_ binary operator, which was incorrect/n// // but gave us the correct answer based on how the test is structured/n// fn how_complex(foo: Option<i32>) -> Option<&'static str> {/n//   match foo {                                            // +1 (for match statement)/n//       Some(value) if value >= 80 && value <= 100 => {    // +1 (for the &&)",
      "effortMinutes": 10,
      "value": 4,
      "location": {
        "path": "cognitive.rs",
        "range": {
          "startLine": 31,
          "startColumn": 13,
          "endLine": 31,
          "endColumn": 26,
          "startByte": 880,
          "endByte": 893
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "generatedAt": "[..]",
      "time": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "file-complexity",
      "message": "High total complexity (count = 55)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_RUST",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "fn main() {/n    if let Some(foo) = Some(42) {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            println!(/"Nested!/");/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}/n",
      "snippetWithContext": "fn main() {/n    if let Some(foo) = Some(42) {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            println!(/"Nested!/");/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 150,
      "value": 55,
      "valueDelta": 5,
      "location": {
        "path": "file_complexity.rs",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 24,
          "endColumn": 1,
          "startByte": 0,
          "endByte": 726
        }
      },
      "partialFingerprints": {
        "file.path": "file_complexity.rs"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "generatedAt": "[..]",
      "time": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-complexity",
      "message": "Function with high complexity (count = 55): main",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_RUST",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "fn main() {/n    if let Some(foo) = Some(42) {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            println!(/"Nested!/");/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "snippetWithContext": "fn main() {/n    if let Some(foo) = Some(42) {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            println!(/"Nested!/");/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 195,
      "value": 55,
      "valueDelta": 37,
      "location": {
        "path": "file_complexity.rs",
        "range": {
          "startLine": 1,
          "startColumn": 1,
          "endLine": 23,
          "endColumn": 2,
          "startByte": 0,
          "endByte": 725
        }
      },
      "partialFingerprints": {
        "function.name": "main"
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "generatedAt": "[..]",
      "time": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "function-parameters",
      "message": "Function with many parameters (count = 6): f2",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_RUST",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "(a: i32, b: String, c: f64, d: bool, e: Vec<i32>, f: Option<&str>)",
      "snippetWithContext": "fn f0() {}/n/nfn f1(dog: i32, cat: String) {}/n/nfn f2(a: i32, b: String, c: f64, d: bool, e: Vec<i32>, f: Option<&str>) {}/n/nfn f3() {/n    // Function calls don't count, only function definitions/n    let path = format!(/n        /"/repos/{}/comparisons/{}...{}/coverage/",/n        repo_id, comparison_commit_sha, commit_sha/n    );/n}",
      "effortMinutes": 15,
      "value": 6,
      "location": {
        "path": "parameters.rs",
        "range": {
          "startLine": 5,
          "startColumn": 6,
          "endLine": 5,
          "endColumn": 72,
          "startByte": 50,
          "endByte": 116
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "generatedAt": "[..]",
      "time": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_RUST",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            println!(/"Nested!/");/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }",
      "snippetWithContext": "fn main() {/n    if let Some(foo) = Some(42) {/n        if foo > 10 {/n            if foo < 20 {/n                if foo % 2 == 0 {/n                    if foo % 3 == 0 {/n                        if foo % 5 == 0 {/n                            if foo % 7 == 0 {/n                                if foo % 11 == 0 {/n                                    if foo % 13 == 0 {/n                                        if foo % 17 == 0 {/n                                            println!(/"Nested!/");/n                                        }/n                                    }/n                                }/n                            }/n                        }/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "file_complexity.rs",
        "range": {
          "startLine": 6,
          "startColumn": 21,
          "endLine": 18,
          "endColumn": 22,
          "startByte": 148,
          "endByte": 675
        }
      },
      "mode": "MODE_BLOCK"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "generatedAt": "[..]",
      "time": "[..]",
      "tool": "qlty",
      "driver": "structure",
      "ruleKey": "nested-control-flow",
      "message": "Deeply nested control flow (level = 5)",
      "level": "LEVEL_MEDIUM",
      "language": "LANGUAGE_RUST",
      "category": "CATEGORY_STRUCTURE",
      "snippet": "if bar % 3 == 0 {/n                        println!(/"Nested!/");/n                    }",
      "snippetWithContext": "fn simple() {}/n/nfn complex() {/n    if let Some(bar) = Some(42) {/n        if bar > 10 {/n            if bar < 20 {/n                if bar % 2 == 0 {/n                    if bar % 3 == 0 {/n                        println!(/"Nested!/");/n                    }/n                }/n            }/n        }/n    }/n}",
      "effortMinutes": 15,
      "value": 5,
      "location": {
        "path": "function_complexity.rs",
        "range": {
          "startLine": 8,
          "startColumn": 21,
          "endLine": 10,
          "endColumn": 22,
          "startByte": 167,
          "endByte": 251
        }
      },
      "mode": "MODE_BLOCK"
    }
  ],
  "stats": [
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "boolean_logic.rs",
      "fullyQualifiedName": "boolean_logic.rs",
      "path": "boolean_logic.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 9,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 2,
      "cyclomatic": 7,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cognitive.rs",
      "fullyQualifiedName": "cognitive.rs",
      "path": "cognitive.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 63,
      "codeLines": 24,
      "commentLines": 37,
      "blankLines": 2,
      "complexity": 5,
      "cyclomatic": 27,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "cyclomatic.rs",
      "fullyQualifiedName": "cyclomatic.rs",
      "path": "cyclomatic.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 10,
      "fields": 0,
      "lines": 74,
      "codeLines": 61,
      "commentLines": 0,
      "blankLines": 13,
      "complexity": 14,
      "cyclomatic": 16,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "fields.rs",
      "fullyQualifiedName": "fields.rs",
      "path": "fields.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 1,
      "functions": 1,
      "fields": 2,
      "lines": 9,
      "codeLines": 8,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "file_complexity.rs",
      "fullyQualifiedName": "file_complexity.rs",
      "path": "file_complexity.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 1,
      "fields": 0,
      "lines": 23,
      "codeLines": 23,
      "commentLines": 0,
      "blankLines": 0,
      "complexity": 55,
      "cyclomatic": 27,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "function_complexity.rs",
      "fullyQualifiedName": "function_complexity.rs",
      "path": "function_complexity.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 15,
      "codeLines": 14,
      "commentLines": 0,
      "blankLines": 1,
      "complexity": 15,
      "cyclomatic": 12,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "identical.rs",
      "fullyQualifiedName": "identical.rs",
      "path": "identical.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 2,
      "fields": 0,
      "lines": 29,
      "codeLines": 24,
      "commentLines": 0,
      "blankLines": 5,
      "complexity": 4,
      "cyclomatic": 19,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "lines.rs",
      "fullyQualifiedName": "lines.rs",
      "path": "lines.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 3,
      "fields": 0,
      "lines": 22,
      "codeLines": 11,
      "commentLines": 8,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "nested_control.rs",
      "fullyQualifiedName": "nested_control.rs",
      "path": "nested_control.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 4,
      "fields": 0,
      "lines": 47,
      "codeLines": 43,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 26,
      "cyclomatic": 27,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "parameters.rs",
      "fullyQualifiedName": "parameters.rs",
      "path": "parameters.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 4,
      "fields": 0,
      "lines": 13,
      "codeLines": 9,
      "commentLines": 1,
      "blankLines": 3,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    },
    {
      "analysisId": "[..]",
      "buildId": "[..]",
      "analyzedAt": "[..]",
      "name": "returns.rs",
      "fullyQualifiedName": "returns.rs",
      "path": "returns.rs",
      "kind": "COMPONENT_TYPE_FILE",
      "language": "LANGUAGE_RUST",
      "files": 1,
      "classes": 0,
      "functions": 5,
      "fields": 0,
      "lines": 23,
      "codeLines": 19,
      "commentLines": 0,
      "blankLines": 4,
      "complexity": 0,
      "cyclomatic": 1,
      "lcom4": 0,
      "generatedAt": "[..]",
      "time": "[..]"
    }
  ]
}
