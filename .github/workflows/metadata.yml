name: metadata

on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize]

jobs:
  conventional:
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event.pull_request.head.ref, 'dependabot/') }}
    permissions:
      pull-requests: read
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          requireScope: false
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            build
            ci
            revert
  issue:
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event.pull_request.head.ref, 'dependabot/') }}
    permissions:
      issues: read
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          # Find a string in the PR body which matches one of these patterns:
          # close #123
          # closes #123
          # closed #123
          # fix #123
          # fixes #123
          # fixed #123
          # resolve #123
          # resolves #123
          # resolved #123
          # repository#123
          # https://github.com/org/repo/issues/123
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            const hiddenTag = '<!-- metadata = {"action":"linked-issue"} -->';
            const issuePattern = /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)|(?:\w+\/)?#(\d+)|https:\/\/github\.com\/[^/]+\/[^/]+\/issues\/(\d+)/ig;
            const matches = [...body.matchAll(issuePattern)];

            const allowedTypes = ['chore', 'docs', 'style', 'test', 'build', 'ci', 'revert'];

            if (/^(?:chore|docs|style|test|build|ci|revert):/i.test(pr.title)) {
              console.log("PR title starts with one of allowed types, skipping linked issue check.");
              return;
            }

            if (matches.length === 0) {
              const comment = "No issue mentions found. Please mention an issue in the pull request description.";
              const helpLink = '[Use GitHub automation to close the issue when a PR is merged](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword)';

              // Check if the comment already exists on this PR
              const { data: existingComments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
              });

              const alreadyCommented = existingComments.some(c => c.body.includes(hiddenTag));

              if (alreadyCommented) {
                console.log("Note: Comment with hidden tag already exists, skipping comment creation.");
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: comment + '\n\n' + helpLink + '\n\n' + hiddenTag,
                });
              }

              core.setFailed("No issues mentioned in the PR body.");
            }